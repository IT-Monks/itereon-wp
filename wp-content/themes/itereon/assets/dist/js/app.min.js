"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(){var e,i,t,o,s,n=document.getElementById("site-navigation");if(n&&void 0!==(e=n.getElementsByTagName("button")[0]))if(void 0!==(i=n.getElementsByTagName("ul")[0])){for(i.setAttribute("aria-expanded","false"),-1===i.className.indexOf("nav-menu")&&(i.className+=" nav-menu"),e.onclick=function(){-1!==n.className.indexOf("toggled")?(n.className=n.className.replace(" toggled",""),e.setAttribute("aria-expanded","false"),i.setAttribute("aria-expanded","false")):(n.className+=" toggled",e.setAttribute("aria-expanded","true"),i.setAttribute("aria-expanded","true"))},o=0,s=(t=i.getElementsByTagName("a")).length;o<s;o++)t[o].addEventListener("focus",r,!0),t[o].addEventListener("blur",r,!0);!function(){var e,i,t=n.querySelectorAll(".menu-item-has-children > a, .page_item_has_children > a");if("ontouchstart"in window)for(e=function(e){var i,t=this.parentNode;if(t.classList.contains("focus"))t.classList.remove("focus");else{for(e.preventDefault(),i=0;i<t.parentNode.children.length;++i)t!==t.parentNode.children[i]&&t.parentNode.children[i].classList.remove("focus");t.classList.add("focus")}},i=0;i<t.length;++i)t[i].addEventListener("touchstart",e,!1)}()}else e.style.display="none";function r(){for(var e=this;-1===e.className.indexOf("nav-menu");)"li"===e.tagName.toLowerCase()&&(-1!==e.className.indexOf("focus")?e.className=e.className.replace(" focus",""):e.className+=" focus"),e=e.parentElement}}(),/(trident|msie)/i.test(navigator.userAgent)&&document.getElementById&&window.addEventListener&&window.addEventListener("hashchange",function(){var e,i=location.hash.substring(1);/^[A-z0-9_-]+$/.test(i)&&(e=document.getElementById(i))&&(/^(?:a|select|input|button|textarea)$/i.test(e.tagName)||(e.tabIndex=-1),e.focus())},!1),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(d){var s,r=window.Slick||{};s=0,(r=function(e,i){var t,o=this;o.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:d(e),appendDots:d(e),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,i){return d('<button type="button" />').text(i+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},o.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},d.extend(o,o.initials),o.activeBreakpoint=null,o.animType=null,o.animProp=null,o.breakpoints=[],o.breakpointSettings=[],o.cssTransitions=!1,o.focussed=!1,o.interrupted=!1,o.hidden="hidden",o.paused=!0,o.positionProp=null,o.respondTo=null,o.rowCount=1,o.shouldClick=!0,o.$slider=d(e),o.$slidesCache=null,o.transformType=null,o.transitionType=null,o.visibilityChange="visibilitychange",o.windowWidth=0,o.windowTimer=null,t=d(e).data("slick")||{},o.options=d.extend({},o.defaults,i,t),o.currentSlide=o.options.initialSlide,o.originalSettings=o.options,void 0!==document.mozHidden?(o.hidden="mozHidden",o.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(o.hidden="webkitHidden",o.visibilityChange="webkitvisibilitychange"),o.autoPlay=d.proxy(o.autoPlay,o),o.autoPlayClear=d.proxy(o.autoPlayClear,o),o.autoPlayIterator=d.proxy(o.autoPlayIterator,o),o.changeSlide=d.proxy(o.changeSlide,o),o.clickHandler=d.proxy(o.clickHandler,o),o.selectHandler=d.proxy(o.selectHandler,o),o.setPosition=d.proxy(o.setPosition,o),o.swipeHandler=d.proxy(o.swipeHandler,o),o.dragHandler=d.proxy(o.dragHandler,o),o.keyHandler=d.proxy(o.keyHandler,o),o.instanceUid=s++,o.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,o.registerBreakpoints(),o.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},r.prototype.addSlide=r.prototype.slickAdd=function(e,i,t){var o=this;if("boolean"==typeof i)t=i,i=null;else if(i<0||i>=o.slideCount)return!1;o.unload(),"number"==typeof i?0===i&&0===o.$slides.length?d(e).appendTo(o.$slideTrack):t?d(e).insertBefore(o.$slides.eq(i)):d(e).insertAfter(o.$slides.eq(i)):!0===t?d(e).prependTo(o.$slideTrack):d(e).appendTo(o.$slideTrack),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slides.each(function(e,i){d(i).attr("data-slick-index",e)}),o.$slidesCache=o.$slides,o.reinit()},r.prototype.animateHeight=function(){var e,i=this;1===i.options.slidesToShow&&!0===i.options.adaptiveHeight&&!1===i.options.vertical&&(e=i.$slides.eq(i.currentSlide).outerHeight(!0),i.$list.animate({height:e},i.options.speed))},r.prototype.animateSlide=function(e,i){var t={},o=this;o.animateHeight(),!0===o.options.rtl&&!1===o.options.vertical&&(e=-e),!1===o.transformsEnabled?!1===o.options.vertical?o.$slideTrack.animate({left:e},o.options.speed,o.options.easing,i):o.$slideTrack.animate({top:e},o.options.speed,o.options.easing,i):!1===o.cssTransitions?(!0===o.options.rtl&&(o.currentLeft=-o.currentLeft),d({animStart:o.currentLeft}).animate({animStart:e},{duration:o.options.speed,easing:o.options.easing,step:function(e){e=Math.ceil(e),!1===o.options.vertical?t[o.animType]="translate("+e+"px, 0px)":t[o.animType]="translate(0px,"+e+"px)",o.$slideTrack.css(t)},complete:function(){i&&i.call()}})):(o.applyTransition(),e=Math.ceil(e),!1===o.options.vertical?t[o.animType]="translate3d("+e+"px, 0px, 0px)":t[o.animType]="translate3d(0px,"+e+"px, 0px)",o.$slideTrack.css(t),i&&setTimeout(function(){o.disableTransition(),i.call()},o.options.speed))},r.prototype.getNavTarget=function(){var e=this.options.asNavFor;return e&&null!==e&&(e=d(e).not(this.$slider)),e},r.prototype.asNavFor=function(i){var e=this.getNavTarget();null!==e&&"object"===_typeof(e)&&e.each(function(){var e=d(this).slick("getSlick");e.unslicked||e.slideHandler(i,!0)})},r.prototype.applyTransition=function(e){var i=this,t={};!1===i.options.fade?t[i.transitionType]=i.transformType+" "+i.options.speed+"ms "+i.options.cssEase:t[i.transitionType]="opacity "+i.options.speed+"ms "+i.options.cssEase,!1===i.options.fade?i.$slideTrack.css(t):i.$slides.eq(e).css(t)},r.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},r.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},r.prototype.autoPlayIterator=function(){var e=this,i=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(i=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(i))},r.prototype.buildArrows=function(){var e=this;!0===e.options.arrows&&(e.$prevArrow=d(e.options.prevArrow).addClass("slick-arrow"),e.$nextArrow=d(e.options.nextArrow).addClass("slick-arrow"),e.slideCount>e.options.slidesToShow?(e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.prependTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),!0!==e.options.infinite&&e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},r.prototype.buildDots=function(){var e,i,t=this;if(!0===t.options.dots&&t.slideCount>t.options.slidesToShow){for(t.$slider.addClass("slick-dotted"),i=d("<ul />").addClass(t.options.dotsClass),e=0;e<=t.getDotCount();e+=1)i.append(d("<li />").append(t.options.customPaging.call(this,t,e)));t.$dots=i.appendTo(t.options.appendDots),t.$dots.find("li").first().addClass("slick-active")}},r.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(e.options.slide+":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each(function(e,i){d(i).attr("data-slick-index",e).data("originalStyling",d(i).attr("style")||"")}),e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?d('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),!0!==e.options.centerMode&&!0!==e.options.swipeToSlide||(e.options.slidesToScroll=1),d("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),!0===e.options.draggable&&e.$list.addClass("draggable")},r.prototype.buildRows=function(){var e,i,t,o=this,s=document.createDocumentFragment(),n=o.$slider.children();if(0<o.options.rows){for(t=o.options.slidesPerRow*o.options.rows,i=Math.ceil(n.length/t),e=0;e<i;e++){for(var r=document.createElement("div"),l=0;l<o.options.rows;l++){for(var a=document.createElement("div"),d=0;d<o.options.slidesPerRow;d++){var c=e*t+(l*o.options.slidesPerRow+d);n.get(c)&&a.appendChild(n.get(c))}r.appendChild(a)}s.appendChild(r)}o.$slider.empty().append(s),o.$slider.children().children().children().css({width:100/o.options.slidesPerRow+"%",display:"inline-block"})}},r.prototype.checkResponsive=function(e,i){var t,o,s,n=this,r=!1,l=n.$slider.width(),a=window.innerWidth||d(window).width();if("window"===n.respondTo?s=a:"slider"===n.respondTo?s=l:"min"===n.respondTo&&(s=Math.min(a,l)),n.options.responsive&&n.options.responsive.length&&null!==n.options.responsive){for(t in o=null,n.breakpoints)n.breakpoints.hasOwnProperty(t)&&(!1===n.originalSettings.mobileFirst?s<n.breakpoints[t]&&(o=n.breakpoints[t]):s>n.breakpoints[t]&&(o=n.breakpoints[t]));null!==o?null!==n.activeBreakpoint&&o===n.activeBreakpoint&&!i||(n.activeBreakpoint=o,"unslick"===n.breakpointSettings[o]?n.unslick(o):(n.options=d.extend({},n.originalSettings,n.breakpointSettings[o]),!0===e&&(n.currentSlide=n.options.initialSlide),n.refresh(e)),r=o):null!==n.activeBreakpoint&&(n.activeBreakpoint=null,n.options=n.originalSettings,!0===e&&(n.currentSlide=n.options.initialSlide),n.refresh(e),r=o),e||!1===r||n.$slider.trigger("breakpoint",[n,r])}},r.prototype.changeSlide=function(e,i){var t,o,s=this,n=d(e.currentTarget);switch(n.is("a")&&e.preventDefault(),n.is("li")||(n=n.closest("li")),t=s.slideCount%s.options.slidesToScroll!=0?0:(s.slideCount-s.currentSlide)%s.options.slidesToScroll,e.data.message){case"previous":o=0==t?s.options.slidesToScroll:s.options.slidesToShow-t,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide-o,!1,i);break;case"next":o=0==t?s.options.slidesToScroll:t,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide+o,!1,i);break;case"index":var r=0===e.data.index?0:e.data.index||n.index()*s.options.slidesToScroll;s.slideHandler(s.checkNavigable(r),!1,i),n.children().trigger("focus");break;default:return}},r.prototype.checkNavigable=function(e){var i=this.getNavigableIndexes(),t=0;if(e>i[i.length-1])e=i[i.length-1];else for(var o in i){if(e<i[o]){e=t;break}t=i[o]}return e},r.prototype.cleanUpEvents=function(){var e=this;e.options.dots&&null!==e.$dots&&(d("li",e.$dots).off("click.slick",e.changeSlide).off("mouseenter.slick",d.proxy(e.interrupt,e,!0)).off("mouseleave.slick",d.proxy(e.interrupt,e,!1)),!0===e.options.accessibility&&e.$dots.off("keydown.slick",e.keyHandler)),e.$slider.off("focus.slick blur.slick"),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow&&e.$prevArrow.off("keydown.slick",e.keyHandler),e.$nextArrow&&e.$nextArrow.off("keydown.slick",e.keyHandler))),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),d(document).off(e.visibilityChange,e.visibility),e.cleanUpSlideEvents(),!0===e.options.accessibility&&e.$list.off("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&d(e.$slideTrack).children().off("click.slick",e.selectHandler),d(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),d(window).off("resize.slick.slick-"+e.instanceUid,e.resize),d("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),d(window).off("load.slick.slick-"+e.instanceUid,e.setPosition)},r.prototype.cleanUpSlideEvents=function(){var e=this;e.$list.off("mouseenter.slick",d.proxy(e.interrupt,e,!0)),e.$list.off("mouseleave.slick",d.proxy(e.interrupt,e,!1))},r.prototype.cleanUpRows=function(){var e;0<this.options.rows&&((e=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(e))},r.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},r.prototype.destroy=function(e){var i=this;i.autoPlayClear(),i.touchObject={},i.cleanUpEvents(),d(".slick-cloned",i.$slider).detach(),i.$dots&&i.$dots.remove(),i.$prevArrow&&i.$prevArrow.length&&(i.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.prevArrow)&&i.$prevArrow.remove()),i.$nextArrow&&i.$nextArrow.length&&(i.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.nextArrow)&&i.$nextArrow.remove()),i.$slides&&(i.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){d(this).attr("style",d(this).data("originalStyling"))}),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.detach(),i.$list.detach(),i.$slider.append(i.$slides)),i.cleanUpRows(),i.$slider.removeClass("slick-slider"),i.$slider.removeClass("slick-initialized"),i.$slider.removeClass("slick-dotted"),i.unslicked=!0,e||i.$slider.trigger("destroy",[i])},r.prototype.disableTransition=function(e){var i={};i[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(i):this.$slides.eq(e).css(i)},r.prototype.fadeSlide=function(e,i){var t=this;!1===t.cssTransitions?(t.$slides.eq(e).css({zIndex:t.options.zIndex}),t.$slides.eq(e).animate({opacity:1},t.options.speed,t.options.easing,i)):(t.applyTransition(e),t.$slides.eq(e).css({opacity:1,zIndex:t.options.zIndex}),i&&setTimeout(function(){t.disableTransition(e),i.call()},t.options.speed))},r.prototype.fadeSlideOut=function(e){var i=this;!1===i.cssTransitions?i.$slides.eq(e).animate({opacity:0,zIndex:i.options.zIndex-2},i.options.speed,i.options.easing):(i.applyTransition(e),i.$slides.eq(e).css({opacity:0,zIndex:i.options.zIndex-2}))},r.prototype.filterSlides=r.prototype.slickFilter=function(e){var i=this;null!==e&&(i.$slidesCache=i.$slides,i.unload(),i.$slideTrack.children(this.options.slide).detach(),i.$slidesCache.filter(e).appendTo(i.$slideTrack),i.reinit())},r.prototype.focusHandler=function(){var t=this;t.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(e){e.stopImmediatePropagation();var i=d(this);setTimeout(function(){t.options.pauseOnFocus&&(t.focussed=i.is(":focus"),t.autoPlay())},0)})},r.prototype.getCurrent=r.prototype.slickCurrentSlide=function(){return this.currentSlide},r.prototype.getDotCount=function(){var e=this,i=0,t=0,o=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++o;else for(;i<e.slideCount;)++o,i=t+e.options.slidesToScroll,t+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)o=e.slideCount;else if(e.options.asNavFor)for(;i<e.slideCount;)++o,i=t+e.options.slidesToScroll,t+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else o=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return o-1},r.prototype.getLeft=function(e){var i,t,o,s,n=this,r=0;return n.slideOffset=0,t=n.$slides.first().outerHeight(!0),!0===n.options.infinite?(n.slideCount>n.options.slidesToShow&&(n.slideOffset=n.slideWidth*n.options.slidesToShow*-1,s=-1,!0===n.options.vertical&&!0===n.options.centerMode&&(2===n.options.slidesToShow?s=-1.5:1===n.options.slidesToShow&&(s=-2)),r=t*n.options.slidesToShow*s),n.slideCount%n.options.slidesToScroll!=0&&e+n.options.slidesToScroll>n.slideCount&&n.slideCount>n.options.slidesToShow&&(r=e>n.slideCount?(n.slideOffset=(n.options.slidesToShow-(e-n.slideCount))*n.slideWidth*-1,(n.options.slidesToShow-(e-n.slideCount))*t*-1):(n.slideOffset=n.slideCount%n.options.slidesToScroll*n.slideWidth*-1,n.slideCount%n.options.slidesToScroll*t*-1))):e+n.options.slidesToShow>n.slideCount&&(n.slideOffset=(e+n.options.slidesToShow-n.slideCount)*n.slideWidth,r=(e+n.options.slidesToShow-n.slideCount)*t),n.slideCount<=n.options.slidesToShow&&(r=n.slideOffset=0),!0===n.options.centerMode&&n.slideCount<=n.options.slidesToShow?n.slideOffset=n.slideWidth*Math.floor(n.options.slidesToShow)/2-n.slideWidth*n.slideCount/2:!0===n.options.centerMode&&!0===n.options.infinite?n.slideOffset+=n.slideWidth*Math.floor(n.options.slidesToShow/2)-n.slideWidth:!0===n.options.centerMode&&(n.slideOffset=0,n.slideOffset+=n.slideWidth*Math.floor(n.options.slidesToShow/2)),i=!1===n.options.vertical?e*n.slideWidth*-1+n.slideOffset:e*t*-1+r,!0===n.options.variableWidth&&(o=n.slideCount<=n.options.slidesToShow||!1===n.options.infinite?n.$slideTrack.children(".slick-slide").eq(e):n.$slideTrack.children(".slick-slide").eq(e+n.options.slidesToShow),i=!0===n.options.rtl?o[0]?-1*(n.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,!0===n.options.centerMode&&(o=n.slideCount<=n.options.slidesToShow||!1===n.options.infinite?n.$slideTrack.children(".slick-slide").eq(e):n.$slideTrack.children(".slick-slide").eq(e+n.options.slidesToShow+1),i=!0===n.options.rtl?o[0]?-1*(n.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,i+=(n.$list.width()-o.outerWidth())/2)),i},r.prototype.getOption=r.prototype.slickGetOption=function(e){return this.options[e]},r.prototype.getNavigableIndexes=function(){for(var e=this,i=0,t=0,o=[],s=!1===e.options.infinite?e.slideCount:(i=-1*e.options.slidesToScroll,t=-1*e.options.slidesToScroll,2*e.slideCount);i<s;)o.push(i),i=t+e.options.slidesToScroll,t+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;return o},r.prototype.getSlick=function(){return this},r.prototype.getSlideCount=function(){var t,o=this,s=!0===o.options.centerMode?o.slideWidth*Math.floor(o.options.slidesToShow/2):0;return!0===o.options.swipeToSlide?(o.$slideTrack.find(".slick-slide").each(function(e,i){if(i.offsetLeft-s+d(i).outerWidth()/2>-1*o.swipeLeft)return t=i,!1}),Math.abs(d(t).attr("data-slick-index")-o.currentSlide)||1):o.options.slidesToScroll},r.prototype.goTo=r.prototype.slickGoTo=function(e,i){this.changeSlide({data:{message:"index",index:parseInt(e)}},i)},r.prototype.init=function(e){var i=this;d(i.$slider).hasClass("slick-initialized")||(d(i.$slider).addClass("slick-initialized"),i.buildRows(),i.buildOut(),i.setProps(),i.startLoad(),i.loadSlider(),i.initializeEvents(),i.updateArrows(),i.updateDots(),i.checkResponsive(!0),i.focusHandler()),e&&i.$slider.trigger("init",[i]),!0===i.options.accessibility&&i.initADA(),i.options.autoplay&&(i.paused=!1,i.autoPlay())},r.prototype.initADA=function(){var o=this,t=Math.ceil(o.slideCount/o.options.slidesToShow),s=o.getNavigableIndexes().filter(function(e){return 0<=e&&e<o.slideCount});o.$slides.add(o.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==o.$dots&&(o.$slides.not(o.$slideTrack.find(".slick-cloned")).each(function(e){var i,t=s.indexOf(e);d(this).attr({role:"tabpanel",id:"slick-slide"+o.instanceUid+e,tabindex:-1}),-1!==t&&(i="slick-slide-control"+o.instanceUid+t,d("#"+i).length&&d(this).attr({"aria-describedby":i}))}),o.$dots.attr("role","tablist").find("li").each(function(e){var i=s[e];d(this).attr({role:"presentation"}),d(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+o.instanceUid+e,"aria-controls":"slick-slide"+o.instanceUid+i,"aria-label":e+1+" of "+t,"aria-selected":null,tabindex:"-1"})}).eq(o.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var e=o.currentSlide,i=e+o.options.slidesToShow;e<i;e++)o.options.focusOnChange?o.$slides.eq(e).attr({tabindex:"0"}):o.$slides.eq(e).removeAttr("tabindex");o.activateADA()},r.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},r.prototype.initDotEvents=function(){var e=this;!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&(d("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),!0===e.options.accessibility&&e.$dots.on("keydown.slick",e.keyHandler)),!0===e.options.dots&&!0===e.options.pauseOnDotsHover&&e.slideCount>e.options.slidesToShow&&d("li",e.$dots).on("mouseenter.slick",d.proxy(e.interrupt,e,!0)).on("mouseleave.slick",d.proxy(e.interrupt,e,!1))},r.prototype.initSlideEvents=function(){var e=this;e.options.pauseOnHover&&(e.$list.on("mouseenter.slick",d.proxy(e.interrupt,e,!0)),e.$list.on("mouseleave.slick",d.proxy(e.interrupt,e,!1)))},r.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.initSlideEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),d(document).on(e.visibilityChange,d.proxy(e.visibility,e)),!0===e.options.accessibility&&e.$list.on("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&d(e.$slideTrack).children().on("click.slick",e.selectHandler),d(window).on("orientationchange.slick.slick-"+e.instanceUid,d.proxy(e.orientationChange,e)),d(window).on("resize.slick.slick-"+e.instanceUid,d.proxy(e.resize,e)),d("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),d(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),d(e.setPosition)},r.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},r.prototype.keyHandler=function(e){var i=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===i.options.accessibility?i.changeSlide({data:{message:!0===i.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===i.options.accessibility&&i.changeSlide({data:{message:!0===i.options.rtl?"previous":"next"}}))},r.prototype.lazyLoad=function(){var e,i,t,n=this;function o(e){d("img[data-lazy]",e).each(function(){var e=d(this),i=d(this).attr("data-lazy"),t=d(this).attr("data-srcset"),o=d(this).attr("data-sizes")||n.$slider.attr("data-sizes"),s=document.createElement("img");s.onload=function(){e.animate({opacity:0},100,function(){t&&(e.attr("srcset",t),o&&e.attr("sizes",o)),e.attr("src",i).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),n.$slider.trigger("lazyLoaded",[n,e,i])})},s.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),n.$slider.trigger("lazyLoadError",[n,e,i])},s.src=i})}if(!0===n.options.centerMode?t=!0===n.options.infinite?(i=n.currentSlide+(n.options.slidesToShow/2+1))+n.options.slidesToShow+2:(i=Math.max(0,n.currentSlide-(n.options.slidesToShow/2+1)),n.options.slidesToShow/2+1+2+n.currentSlide):(i=n.options.infinite?n.options.slidesToShow+n.currentSlide:n.currentSlide,t=Math.ceil(i+n.options.slidesToShow),!0===n.options.fade&&(0<i&&i--,t<=n.slideCount&&t++)),e=n.$slider.find(".slick-slide").slice(i,t),"anticipated"===n.options.lazyLoad)for(var s=i-1,r=t,l=n.$slider.find(".slick-slide"),a=0;a<n.options.slidesToScroll;a++)s<0&&(s=n.slideCount-1),e=(e=e.add(l.eq(s))).add(l.eq(r)),s--,r++;o(e),n.slideCount<=n.options.slidesToShow?o(n.$slider.find(".slick-slide")):n.currentSlide>=n.slideCount-n.options.slidesToShow?o(n.$slider.find(".slick-cloned").slice(0,n.options.slidesToShow)):0===n.currentSlide&&o(n.$slider.find(".slick-cloned").slice(-1*n.options.slidesToShow))},r.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},r.prototype.next=r.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},r.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},r.prototype.pause=r.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},r.prototype.play=r.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},r.prototype.postSlide=function(e){var i=this;i.unslicked||(i.$slider.trigger("afterChange",[i,e]),i.animating=!1,i.slideCount>i.options.slidesToShow&&i.setPosition(),i.swipeLeft=null,i.options.autoplay&&i.autoPlay(),!0===i.options.accessibility&&(i.initADA(),i.options.focusOnChange&&d(i.$slides.get(i.currentSlide)).attr("tabindex",0).focus()))},r.prototype.prev=r.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},r.prototype.preventDefault=function(e){e.preventDefault()},r.prototype.progressiveLazyLoad=function(e){e=e||1;var i,t,o,s,n,r=this,l=d("img[data-lazy]",r.$slider);l.length?(i=l.first(),t=i.attr("data-lazy"),o=i.attr("data-srcset"),s=i.attr("data-sizes")||r.$slider.attr("data-sizes"),(n=document.createElement("img")).onload=function(){o&&(i.attr("srcset",o),s&&i.attr("sizes",s)),i.attr("src",t).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===r.options.adaptiveHeight&&r.setPosition(),r.$slider.trigger("lazyLoaded",[r,i,t]),r.progressiveLazyLoad()},n.onerror=function(){e<3?setTimeout(function(){r.progressiveLazyLoad(e+1)},500):(i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,i,t]),r.progressiveLazyLoad())},n.src=t):r.$slider.trigger("allImagesLoaded",[r])},r.prototype.refresh=function(e){var i,t=this,o=t.slideCount-t.options.slidesToShow;!t.options.infinite&&t.currentSlide>o&&(t.currentSlide=o),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),i=t.currentSlide,t.destroy(!0),d.extend(t,t.initials,{currentSlide:i}),t.init(),e||t.changeSlide({data:{message:"index",index:i}},!1)},r.prototype.registerBreakpoints=function(){var e,i,t,o=this,s=o.options.responsive||null;if("array"===d.type(s)&&s.length){for(e in o.respondTo=o.options.respondTo||"window",s)if(t=o.breakpoints.length-1,s.hasOwnProperty(e)){for(i=s[e].breakpoint;0<=t;)o.breakpoints[t]&&o.breakpoints[t]===i&&o.breakpoints.splice(t,1),t--;o.breakpoints.push(i),o.breakpointSettings[i]=s[e].settings}o.breakpoints.sort(function(e,i){return o.options.mobileFirst?e-i:i-e})}},r.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.registerBreakpoints(),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.cleanUpSlideEvents(),e.initSlideEvents(),e.checkResponsive(!1,!0),!0===e.options.focusOnSelect&&d(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.setPosition(),e.focusHandler(),e.paused=!e.options.autoplay,e.autoPlay(),e.$slider.trigger("reInit",[e])},r.prototype.resize=function(){var e=this;d(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=d(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()},50))},r.prototype.removeSlide=r.prototype.slickRemove=function(e,i,t){var o=this;if(e="boolean"==typeof e?!0===(i=e)?0:o.slideCount-1:!0===i?--e:e,o.slideCount<1||e<0||e>o.slideCount-1)return!1;o.unload(),!0===t?o.$slideTrack.children().remove():o.$slideTrack.children(this.options.slide).eq(e).remove(),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slidesCache=o.$slides,o.reinit()},r.prototype.setCSS=function(e){var i,t,o=this,s={};!0===o.options.rtl&&(e=-e),i="left"==o.positionProp?Math.ceil(e)+"px":"0px",t="top"==o.positionProp?Math.ceil(e)+"px":"0px",s[o.positionProp]=e,!1===o.transformsEnabled||(!(s={})===o.cssTransitions?s[o.animType]="translate("+i+", "+t+")":s[o.animType]="translate3d("+i+", "+t+", 0px)"),o.$slideTrack.css(s)},r.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var i=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-i)},r.prototype.setFade=function(){var t,o=this;o.$slides.each(function(e,i){t=o.slideWidth*e*-1,!0===o.options.rtl?d(i).css({position:"relative",right:t,top:0,zIndex:o.options.zIndex-2,opacity:0}):d(i).css({position:"relative",left:t,top:0,zIndex:o.options.zIndex-2,opacity:0})}),o.$slides.eq(o.currentSlide).css({zIndex:o.options.zIndex-1,opacity:1})},r.prototype.setHeight=function(){var e,i=this;1===i.options.slidesToShow&&!0===i.options.adaptiveHeight&&!1===i.options.vertical&&(e=i.$slides.eq(i.currentSlide).outerHeight(!0),i.$list.css("height",e))},r.prototype.setOption=r.prototype.slickSetOption=function(){var e,i,t,o,s,n=this,r=!1;if("object"===d.type(arguments[0])?(t=arguments[0],r=arguments[1],s="multiple"):"string"===d.type(arguments[0])&&(o=arguments[1],r=arguments[2],"responsive"===(t=arguments[0])&&"array"===d.type(arguments[1])?s="responsive":void 0!==arguments[1]&&(s="single")),"single"===s)n.options[t]=o;else if("multiple"===s)d.each(t,function(e,i){n.options[e]=i});else if("responsive"===s)for(i in o)if("array"!==d.type(n.options.responsive))n.options.responsive=[o[i]];else{for(e=n.options.responsive.length-1;0<=e;)n.options.responsive[e].breakpoint===o[i].breakpoint&&n.options.responsive.splice(e,1),e--;n.options.responsive.push(o[i])}r&&(n.unload(),n.reinit())},r.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},r.prototype.setProps=function(){var e=this,i=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===i.WebkitTransition&&void 0===i.MozTransition&&void 0===i.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==i.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===i.perspectiveProperty&&void 0===i.webkitPerspective&&(e.animType=!1)),void 0!==i.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===i.perspectiveProperty&&void 0===i.MozPerspective&&(e.animType=!1)),void 0!==i.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===i.perspectiveProperty&&void 0===i.webkitPerspective&&(e.animType=!1)),void 0!==i.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===i.msTransform&&(e.animType=!1)),void 0!==i.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},r.prototype.setSlideClasses=function(e){var i,t,o,s,n=this,r=n.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true");n.$slides.eq(e).addClass("slick-current"),!0===n.options.centerMode?(o=n.options.slidesToShow%2==0?1:0,s=Math.floor(n.options.slidesToShow/2),!0===n.options.infinite&&(s<=e&&e<=n.slideCount-1-s?n.$slides.slice(e-s+o,e+s+1).addClass("slick-active").attr("aria-hidden","false"):(i=n.options.slidesToShow+e,r.slice(i-s+1+o,i+s+2).addClass("slick-active").attr("aria-hidden","false")),0===e?r.eq(r.length-1-n.options.slidesToShow).addClass("slick-center"):e===n.slideCount-1&&r.eq(n.options.slidesToShow).addClass("slick-center")),n.$slides.eq(e).addClass("slick-center")):0<=e&&e<=n.slideCount-n.options.slidesToShow?n.$slides.slice(e,e+n.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):r.length<=n.options.slidesToShow?r.addClass("slick-active").attr("aria-hidden","false"):(t=n.slideCount%n.options.slidesToShow,i=!0===n.options.infinite?n.options.slidesToShow+e:e,n.options.slidesToShow==n.options.slidesToScroll&&n.slideCount-e<n.options.slidesToShow?r.slice(i-(n.options.slidesToShow-t),i+t).addClass("slick-active").attr("aria-hidden","false"):r.slice(i,i+n.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false")),"ondemand"!==n.options.lazyLoad&&"anticipated"!==n.options.lazyLoad||n.lazyLoad()},r.prototype.setupInfinite=function(){var e,i,t,o=this;if(!0===o.options.fade&&(o.options.centerMode=!1),!0===o.options.infinite&&!1===o.options.fade&&(i=null,o.slideCount>o.options.slidesToShow)){for(t=!0===o.options.centerMode?o.options.slidesToShow+1:o.options.slidesToShow,e=o.slideCount;e>o.slideCount-t;--e)i=e-1,d(o.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i-o.slideCount).prependTo(o.$slideTrack).addClass("slick-cloned");for(e=0;e<t+o.slideCount;e+=1)i=e,d(o.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i+o.slideCount).appendTo(o.$slideTrack).addClass("slick-cloned");o.$slideTrack.find(".slick-cloned").find("[id]").each(function(){d(this).attr("id","")})}},r.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},r.prototype.selectHandler=function(e){var i=d(e.target).is(".slick-slide")?d(e.target):d(e.target).parents(".slick-slide"),t=(t=parseInt(i.attr("data-slick-index")))||0;this.slideCount<=this.options.slidesToShow?this.slideHandler(t,!1,!0):this.slideHandler(t)},r.prototype.slideHandler=function(e,i,t){var o,s,n,r,l,a,d=this;if(i=i||!1,!(!0===d.animating&&!0===d.options.waitForAnimate||!0===d.options.fade&&d.currentSlide===e))if(!1===i&&d.asNavFor(e),o=e,l=d.getLeft(o),r=d.getLeft(d.currentSlide),d.currentLeft=null===d.swipeLeft?r:d.swipeLeft,!1===d.options.infinite&&!1===d.options.centerMode&&(e<0||e>d.getDotCount()*d.options.slidesToScroll))!1===d.options.fade&&(o=d.currentSlide,!0!==t&&d.slideCount>d.options.slidesToShow?d.animateSlide(r,function(){d.postSlide(o)}):d.postSlide(o));else if(!1===d.options.infinite&&!0===d.options.centerMode&&(e<0||e>d.slideCount-d.options.slidesToScroll))!1===d.options.fade&&(o=d.currentSlide,!0!==t&&d.slideCount>d.options.slidesToShow?d.animateSlide(r,function(){d.postSlide(o)}):d.postSlide(o));else{if(d.options.autoplay&&clearInterval(d.autoPlayTimer),s=o<0?d.slideCount%d.options.slidesToScroll!=0?d.slideCount-d.slideCount%d.options.slidesToScroll:d.slideCount+o:o>=d.slideCount?d.slideCount%d.options.slidesToScroll!=0?0:o-d.slideCount:o,d.animating=!0,d.$slider.trigger("beforeChange",[d,d.currentSlide,s]),n=d.currentSlide,d.currentSlide=s,d.setSlideClasses(d.currentSlide),d.options.asNavFor&&(a=(a=d.getNavTarget()).slick("getSlick")).slideCount<=a.options.slidesToShow&&a.setSlideClasses(d.currentSlide),d.updateDots(),d.updateArrows(),!0===d.options.fade)return!0!==t?(d.fadeSlideOut(n),d.fadeSlide(s,function(){d.postSlide(s)})):d.postSlide(s),void d.animateHeight();!0!==t&&d.slideCount>d.options.slidesToShow?d.animateSlide(l,function(){d.postSlide(s)}):d.postSlide(s)}},r.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},r.prototype.swipeDirection=function(){var e=this,i=e.touchObject.startX-e.touchObject.curX,t=e.touchObject.startY-e.touchObject.curY,o=Math.atan2(t,i),s=Math.round(180*o/Math.PI);return s<0&&(s=360-Math.abs(s)),s<=45&&0<=s||s<=360&&315<=s?!1===e.options.rtl?"left":"right":135<=s&&s<=225?!1===e.options.rtl?"right":"left":!0===e.options.verticalSwiping?35<=s&&s<=135?"down":"up":"vertical"},r.prototype.swipeEnd=function(e){var i,t,o=this;if(o.dragging=!1,o.swiping=!1,o.scrolling)return o.scrolling=!1;if(o.interrupted=!1,o.shouldClick=!(10<o.touchObject.swipeLength),void 0===o.touchObject.curX)return!1;if(!0===o.touchObject.edgeHit&&o.$slider.trigger("edge",[o,o.swipeDirection()]),o.touchObject.swipeLength>=o.touchObject.minSwipe){switch(t=o.swipeDirection()){case"left":case"down":i=o.options.swipeToSlide?o.checkNavigable(o.currentSlide+o.getSlideCount()):o.currentSlide+o.getSlideCount(),o.currentDirection=0;break;case"right":case"up":i=o.options.swipeToSlide?o.checkNavigable(o.currentSlide-o.getSlideCount()):o.currentSlide-o.getSlideCount(),o.currentDirection=1}"vertical"!=t&&(o.slideHandler(i),o.touchObject={},o.$slider.trigger("swipe",[o,t]))}else o.touchObject.startX!==o.touchObject.curX&&(o.slideHandler(o.currentSlide),o.touchObject={})},r.prototype.swipeHandler=function(e){var i=this;if(!(!1===i.options.swipe||"ontouchend"in document&&!1===i.options.swipe||!1===i.options.draggable&&-1!==e.type.indexOf("mouse")))switch(i.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,i.touchObject.minSwipe=i.listWidth/i.options.touchThreshold,!0===i.options.verticalSwiping&&(i.touchObject.minSwipe=i.listHeight/i.options.touchThreshold),e.data.action){case"start":i.swipeStart(e);break;case"move":i.swipeMove(e);break;case"end":i.swipeEnd(e)}},r.prototype.swipeMove=function(e){var i,t,o,s,n,r=this,l=void 0!==e.originalEvent?e.originalEvent.touches:null;return!(!r.dragging||r.scrolling||l&&1!==l.length)&&(i=r.getLeft(r.currentSlide),r.touchObject.curX=void 0!==l?l[0].pageX:e.clientX,r.touchObject.curY=void 0!==l?l[0].pageY:e.clientY,r.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(r.touchObject.curX-r.touchObject.startX,2))),n=Math.round(Math.sqrt(Math.pow(r.touchObject.curY-r.touchObject.startY,2))),!r.options.verticalSwiping&&!r.swiping&&4<n?!(r.scrolling=!0):(!0===r.options.verticalSwiping&&(r.touchObject.swipeLength=n),t=r.swipeDirection(),void 0!==e.originalEvent&&4<r.touchObject.swipeLength&&(r.swiping=!0,e.preventDefault()),s=(!1===r.options.rtl?1:-1)*(r.touchObject.curX>r.touchObject.startX?1:-1),!0===r.options.verticalSwiping&&(s=r.touchObject.curY>r.touchObject.startY?1:-1),o=r.touchObject.swipeLength,(r.touchObject.edgeHit=!1)===r.options.infinite&&(0===r.currentSlide&&"right"===t||r.currentSlide>=r.getDotCount()&&"left"===t)&&(o=r.touchObject.swipeLength*r.options.edgeFriction,r.touchObject.edgeHit=!0),!1===r.options.vertical?r.swipeLeft=i+o*s:r.swipeLeft=i+o*(r.$list.height()/r.listWidth)*s,!0===r.options.verticalSwiping&&(r.swipeLeft=i+o*s),!0!==r.options.fade&&!1!==r.options.touchMove&&(!0===r.animating?(r.swipeLeft=null,!1):void r.setCSS(r.swipeLeft))))},r.prototype.swipeStart=function(e){var i,t=this;if(t.interrupted=!0,1!==t.touchObject.fingerCount||t.slideCount<=t.options.slidesToShow)return!(t.touchObject={});void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(i=e.originalEvent.touches[0]),t.touchObject.startX=t.touchObject.curX=void 0!==i?i.pageX:e.clientX,t.touchObject.startY=t.touchObject.curY=void 0!==i?i.pageY:e.clientY,t.dragging=!0},r.prototype.unfilterSlides=r.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},r.prototype.unload=function(){var e=this;d(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove(),e.$nextArrow&&e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},r.prototype.unslick=function(e){this.$slider.trigger("unslick",[this,e]),this.destroy()},r.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2);!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode||e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode)&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},r.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},r.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},d.fn.slick=function(){for(var e,i=this,t=arguments[0],o=Array.prototype.slice.call(arguments,1),s=i.length,n=0;n<s;n++)if("object"==_typeof(t)||void 0===t?i[n].slick=new r(i[n],t):e=i[n].slick[t].apply(i[n].slick,o),void 0!==e)return e;return i}}),document.addEventListener("wpcf7submit",function(e){"123"===e.detail.contactFormId&&alert("The contact form ID is 123.")},!1),$=jQuery,$(document).ready(function(e){e(".hamburger").click(function(){e(this);e(this).toggleClass("is-active")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmlnYXRpb24uanMiLCJza2lwLWxpbmstZm9jdXMtZml4LmpzIiwic2xpY2suanMiLCJjZjctZXZlbnRzLmpzIiwiY3VzdG9tLmpzIl0sIm5hbWVzIjpbImJ1dHRvbiIsIm1lbnUiLCJsaW5rcyIsImkiLCJsZW4iLCJjb250YWluZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzZXRBdHRyaWJ1dGUiLCJjbGFzc05hbWUiLCJpbmRleE9mIiwib25jbGljayIsInJlcGxhY2UiLCJsZW5ndGgiLCJhZGRFdmVudExpc3RlbmVyIiwidG9nZ2xlRm9jdXMiLCJ0b3VjaFN0YXJ0Rm4iLCJwYXJlbnRMaW5rIiwicXVlcnlTZWxlY3RvckFsbCIsIndpbmRvdyIsImUiLCJtZW51SXRlbSIsInRoaXMiLCJwYXJlbnROb2RlIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJyZW1vdmUiLCJwcmV2ZW50RGVmYXVsdCIsImNoaWxkcmVuIiwiYWRkIiwic3R5bGUiLCJkaXNwbGF5Iiwic2VsZiIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsInBhcmVudEVsZW1lbnQiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiZWxlbWVudCIsImlkIiwibG9jYXRpb24iLCJoYXNoIiwic3Vic3RyaW5nIiwidGFiSW5kZXgiLCJmb2N1cyIsImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImpRdWVyeSIsIiQiLCJpbnN0YW5jZVVpZCIsIlNsaWNrIiwic2V0dGluZ3MiLCJkYXRhU2V0dGluZ3MiLCJfIiwiZGVmYXVsdHMiLCJhY2Nlc3NpYmlsaXR5IiwiYWRhcHRpdmVIZWlnaHQiLCJhcHBlbmRBcnJvd3MiLCJhcHBlbmREb3RzIiwiYXJyb3dzIiwiYXNOYXZGb3IiLCJwcmV2QXJyb3ciLCJuZXh0QXJyb3ciLCJhdXRvcGxheSIsImF1dG9wbGF5U3BlZWQiLCJjZW50ZXJNb2RlIiwiY2VudGVyUGFkZGluZyIsImNzc0Vhc2UiLCJjdXN0b21QYWdpbmciLCJzbGlkZXIiLCJ0ZXh0IiwiZG90cyIsImRvdHNDbGFzcyIsImRyYWdnYWJsZSIsImVhc2luZyIsImVkZ2VGcmljdGlvbiIsImZhZGUiLCJmb2N1c09uU2VsZWN0IiwiZm9jdXNPbkNoYW5nZSIsImluZmluaXRlIiwiaW5pdGlhbFNsaWRlIiwibGF6eUxvYWQiLCJtb2JpbGVGaXJzdCIsInBhdXNlT25Ib3ZlciIsInBhdXNlT25Gb2N1cyIsInBhdXNlT25Eb3RzSG92ZXIiLCJyZXNwb25kVG8iLCJyZXNwb25zaXZlIiwicm93cyIsInJ0bCIsInNsaWRlIiwic2xpZGVzUGVyUm93Iiwic2xpZGVzVG9TaG93Iiwic2xpZGVzVG9TY3JvbGwiLCJzcGVlZCIsInN3aXBlIiwic3dpcGVUb1NsaWRlIiwidG91Y2hNb3ZlIiwidG91Y2hUaHJlc2hvbGQiLCJ1c2VDU1MiLCJ1c2VUcmFuc2Zvcm0iLCJ2YXJpYWJsZVdpZHRoIiwidmVydGljYWwiLCJ2ZXJ0aWNhbFN3aXBpbmciLCJ3YWl0Rm9yQW5pbWF0ZSIsInpJbmRleCIsImluaXRpYWxzIiwiYW5pbWF0aW5nIiwiZHJhZ2dpbmciLCJhdXRvUGxheVRpbWVyIiwiY3VycmVudERpcmVjdGlvbiIsImN1cnJlbnRMZWZ0IiwiY3VycmVudFNsaWRlIiwiZGlyZWN0aW9uIiwiJGRvdHMiLCJsaXN0V2lkdGgiLCJsaXN0SGVpZ2h0IiwibG9hZEluZGV4IiwiJG5leHRBcnJvdyIsIiRwcmV2QXJyb3ciLCJzY3JvbGxpbmciLCJzbGlkZUNvdW50Iiwic2xpZGVXaWR0aCIsIiRzbGlkZVRyYWNrIiwiJHNsaWRlcyIsInNsaWRpbmciLCJzbGlkZU9mZnNldCIsInN3aXBlTGVmdCIsInN3aXBpbmciLCIkbGlzdCIsInRvdWNoT2JqZWN0IiwidHJhbnNmb3Jtc0VuYWJsZWQiLCJ1bnNsaWNrZWQiLCJleHRlbmQiLCJhY3RpdmVCcmVha3BvaW50IiwiYW5pbVR5cGUiLCJhbmltUHJvcCIsImJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludFNldHRpbmdzIiwiY3NzVHJhbnNpdGlvbnMiLCJmb2N1c3NlZCIsImludGVycnVwdGVkIiwiaGlkZGVuIiwicGF1c2VkIiwicG9zaXRpb25Qcm9wIiwicm93Q291bnQiLCJzaG91bGRDbGljayIsIiRzbGlkZXIiLCIkc2xpZGVzQ2FjaGUiLCJ0cmFuc2Zvcm1UeXBlIiwidHJhbnNpdGlvblR5cGUiLCJ2aXNpYmlsaXR5Q2hhbmdlIiwid2luZG93V2lkdGgiLCJ3aW5kb3dUaW1lciIsImRhdGEiLCJvcHRpb25zIiwib3JpZ2luYWxTZXR0aW5ncyIsIm1vekhpZGRlbiIsIndlYmtpdEhpZGRlbiIsImF1dG9QbGF5IiwicHJveHkiLCJhdXRvUGxheUNsZWFyIiwiYXV0b1BsYXlJdGVyYXRvciIsImNoYW5nZVNsaWRlIiwiY2xpY2tIYW5kbGVyIiwic2VsZWN0SGFuZGxlciIsInNldFBvc2l0aW9uIiwic3dpcGVIYW5kbGVyIiwiZHJhZ0hhbmRsZXIiLCJrZXlIYW5kbGVyIiwiaHRtbEV4cHIiLCJyZWdpc3RlckJyZWFrcG9pbnRzIiwiaW5pdCIsInByb3RvdHlwZSIsImFjdGl2YXRlQURBIiwiZmluZCIsImF0dHIiLCJhcmlhLWhpZGRlbiIsInRhYmluZGV4IiwiYWRkU2xpZGUiLCJzbGlja0FkZCIsIm1hcmt1cCIsImluZGV4IiwiYWRkQmVmb3JlIiwidW5sb2FkIiwiYXBwZW5kVG8iLCJpbnNlcnRCZWZvcmUiLCJlcSIsImluc2VydEFmdGVyIiwicHJlcGVuZFRvIiwiZGV0YWNoIiwiYXBwZW5kIiwiZWFjaCIsInJlaW5pdCIsImFuaW1hdGVIZWlnaHQiLCJ0YXJnZXRIZWlnaHQiLCJvdXRlckhlaWdodCIsImFuaW1hdGUiLCJoZWlnaHQiLCJhbmltYXRlU2xpZGUiLCJ0YXJnZXRMZWZ0IiwiY2FsbGJhY2siLCJhbmltUHJvcHMiLCJsZWZ0IiwidG9wIiwiYW5pbVN0YXJ0IiwiZHVyYXRpb24iLCJzdGVwIiwibm93IiwiTWF0aCIsImNlaWwiLCJjc3MiLCJjb21wbGV0ZSIsImNhbGwiLCJhcHBseVRyYW5zaXRpb24iLCJzZXRUaW1lb3V0IiwiZGlzYWJsZVRyYW5zaXRpb24iLCJnZXROYXZUYXJnZXQiLCJub3QiLCJfdHlwZW9mIiwidGFyZ2V0Iiwic2xpY2siLCJzbGlkZUhhbmRsZXIiLCJ0cmFuc2l0aW9uIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwic2xpZGVUbyIsImJ1aWxkQXJyb3dzIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInJlbW92ZUF0dHIiLCJhcmlhLWRpc2FibGVkIiwiYnVpbGREb3RzIiwiZG90IiwiZ2V0RG90Q291bnQiLCJmaXJzdCIsImJ1aWxkT3V0Iiwid3JhcEFsbCIsInBhcmVudCIsIndyYXAiLCJzZXR1cEluZmluaXRlIiwidXBkYXRlRG90cyIsInNldFNsaWRlQ2xhc3NlcyIsImJ1aWxkUm93cyIsImEiLCJudW1PZlNsaWRlcyIsInNsaWRlc1BlclNlY3Rpb24iLCJuZXdTbGlkZXMiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwib3JpZ2luYWxTbGlkZXMiLCJjcmVhdGVFbGVtZW50IiwiYiIsInJvdyIsImMiLCJnZXQiLCJhcHBlbmRDaGlsZCIsImVtcHR5Iiwid2lkdGgiLCJjaGVja1Jlc3BvbnNpdmUiLCJpbml0aWFsIiwiZm9yY2VVcGRhdGUiLCJicmVha3BvaW50IiwidGFyZ2V0QnJlYWtwb2ludCIsInJlc3BvbmRUb1dpZHRoIiwidHJpZ2dlckJyZWFrcG9pbnQiLCJzbGlkZXJXaWR0aCIsImlubmVyV2lkdGgiLCJtaW4iLCJoYXNPd25Qcm9wZXJ0eSIsInVuc2xpY2siLCJyZWZyZXNoIiwidHJpZ2dlciIsImV2ZW50IiwiZG9udEFuaW1hdGUiLCJpbmRleE9mZnNldCIsIiR0YXJnZXQiLCJjdXJyZW50VGFyZ2V0IiwiaXMiLCJjbG9zZXN0IiwibWVzc2FnZSIsImNoZWNrTmF2aWdhYmxlIiwibmF2aWdhYmxlcyIsImdldE5hdmlnYWJsZUluZGV4ZXMiLCJwcmV2TmF2aWdhYmxlIiwibiIsImNsZWFuVXBFdmVudHMiLCJvZmYiLCJpbnRlcnJ1cHQiLCJ2aXNpYmlsaXR5IiwiY2xlYW5VcFNsaWRlRXZlbnRzIiwib3JpZW50YXRpb25DaGFuZ2UiLCJyZXNpemUiLCJjbGVhblVwUm93cyIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInN0b3BQcm9wYWdhdGlvbiIsImRlc3Ryb3kiLCJmYWRlU2xpZGUiLCJzbGlkZUluZGV4Iiwib3BhY2l0eSIsImZhZGVTbGlkZU91dCIsImZpbHRlclNsaWRlcyIsInNsaWNrRmlsdGVyIiwiZmlsdGVyIiwiZm9jdXNIYW5kbGVyIiwib24iLCIkc2YiLCJnZXRDdXJyZW50Iiwic2xpY2tDdXJyZW50U2xpZGUiLCJicmVha1BvaW50IiwiY291bnRlciIsInBhZ2VyUXR5IiwiZ2V0TGVmdCIsInZlcnRpY2FsSGVpZ2h0IiwidGFyZ2V0U2xpZGUiLCJjb2VmIiwidmVydGljYWxPZmZzZXQiLCJmbG9vciIsIm9mZnNldExlZnQiLCJvdXRlcldpZHRoIiwiZ2V0T3B0aW9uIiwic2xpY2tHZXRPcHRpb24iLCJvcHRpb24iLCJpbmRleGVzIiwibWF4IiwicHVzaCIsImdldFNsaWNrIiwiZ2V0U2xpZGVDb3VudCIsInN3aXBlZFNsaWRlIiwiY2VudGVyT2Zmc2V0IiwiYWJzIiwiZ29UbyIsInNsaWNrR29UbyIsInBhcnNlSW50IiwiY3JlYXRpb24iLCJoYXNDbGFzcyIsInNldFByb3BzIiwic3RhcnRMb2FkIiwibG9hZFNsaWRlciIsImluaXRpYWxpemVFdmVudHMiLCJ1cGRhdGVBcnJvd3MiLCJpbml0QURBIiwibnVtRG90R3JvdXBzIiwidGFiQ29udHJvbEluZGV4ZXMiLCJ2YWwiLCJhcmlhQnV0dG9uQ29udHJvbCIsInNsaWRlQ29udHJvbEluZGV4Iiwicm9sZSIsImFyaWEtZGVzY3JpYmVkYnkiLCJtYXBwZWRTbGlkZUluZGV4IiwiYXJpYS1jb250cm9scyIsImFyaWEtbGFiZWwiLCJhcmlhLXNlbGVjdGVkIiwiZW5kIiwiaW5pdEFycm93RXZlbnRzIiwiaW5pdERvdEV2ZW50cyIsImluaXRTbGlkZUV2ZW50cyIsImFjdGlvbiIsImluaXRVSSIsInNob3ciLCJtYXRjaCIsImtleUNvZGUiLCJsb2FkUmFuZ2UiLCJyYW5nZVN0YXJ0IiwicmFuZ2VFbmQiLCJsb2FkSW1hZ2VzIiwiaW1hZ2VzU2NvcGUiLCJpbWFnZSIsImltYWdlU291cmNlIiwiaW1hZ2VTcmNTZXQiLCJpbWFnZVNpemVzIiwiaW1hZ2VUb0xvYWQiLCJvbmxvYWQiLCJvbmVycm9yIiwic3JjIiwic2xpY2UiLCJwcmV2U2xpZGUiLCJuZXh0U2xpZGUiLCJwcm9ncmVzc2l2ZUxhenlMb2FkIiwibmV4dCIsInNsaWNrTmV4dCIsInBhdXNlIiwic2xpY2tQYXVzZSIsInBsYXkiLCJzbGlja1BsYXkiLCJwb3N0U2xpZGUiLCJwcmV2Iiwic2xpY2tQcmV2IiwidHJ5Q291bnQiLCIkaW1nc1RvTG9hZCIsImluaXRpYWxpemluZyIsImxhc3RWaXNpYmxlSW5kZXgiLCJjdXJyZW50QnJlYWtwb2ludCIsImwiLCJyZXNwb25zaXZlU2V0dGluZ3MiLCJ0eXBlIiwic3BsaWNlIiwic29ydCIsImNsZWFyVGltZW91dCIsIndpbmRvd0RlbGF5IiwicmVtb3ZlU2xpZGUiLCJzbGlja1JlbW92ZSIsInJlbW92ZUJlZm9yZSIsInJlbW92ZUFsbCIsInNldENTUyIsInBvc2l0aW9uIiwieCIsInkiLCJwb3NpdGlvblByb3BzIiwic2V0RGltZW5zaW9ucyIsInBhZGRpbmciLCJvZmZzZXQiLCJzZXRGYWRlIiwicmlnaHQiLCJzZXRIZWlnaHQiLCJzZXRPcHRpb24iLCJzbGlja1NldE9wdGlvbiIsIml0ZW0iLCJ2YWx1ZSIsImFyZ3VtZW50cyIsIm9wdCIsImJvZHlTdHlsZSIsImJvZHkiLCJ1bmRlZmluZWQiLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIm1zVHJhbnNpdGlvbiIsIk9UcmFuc2Zvcm0iLCJwZXJzcGVjdGl2ZVByb3BlcnR5Iiwid2Via2l0UGVyc3BlY3RpdmUiLCJNb3pUcmFuc2Zvcm0iLCJNb3pQZXJzcGVjdGl2ZSIsIndlYmtpdFRyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwidHJhbnNmb3JtIiwicmVtYWluZGVyIiwiZXZlbkNvZWYiLCJhbGxTbGlkZXMiLCJpbmZpbml0ZUNvdW50IiwiY2xvbmUiLCJ0b2dnbGUiLCJ0YXJnZXRFbGVtZW50IiwicGFyZW50cyIsInN5bmMiLCJhbmltU2xpZGUiLCJvbGRTbGlkZSIsInNsaWRlTGVmdCIsIm5hdlRhcmdldCIsImhpZGUiLCJzd2lwZURpcmVjdGlvbiIsInhEaXN0Iiwic3RhcnRYIiwiY3VyWCIsInlEaXN0Iiwic3RhcnRZIiwiY3VyWSIsInIiLCJhdGFuMiIsInN3aXBlQW5nbGUiLCJyb3VuZCIsIlBJIiwic3dpcGVFbmQiLCJzd2lwZUxlbmd0aCIsImVkZ2VIaXQiLCJtaW5Td2lwZSIsImZpbmdlckNvdW50Iiwib3JpZ2luYWxFdmVudCIsInRvdWNoZXMiLCJzd2lwZVN0YXJ0Iiwic3dpcGVNb3ZlIiwiY3VyTGVmdCIsInBvc2l0aW9uT2Zmc2V0IiwidmVydGljYWxTd2lwZUxlbmd0aCIsInBhZ2VYIiwiY2xpZW50WCIsInBhZ2VZIiwiY2xpZW50WSIsInNxcnQiLCJwb3ciLCJ1bmZpbHRlclNsaWRlcyIsInNsaWNrVW5maWx0ZXIiLCJmcm9tQnJlYWtwb2ludCIsImZuIiwicmV0IiwiYXJncyIsIkFycmF5IiwiYXBwbHkiLCJkZXRhaWwiLCJjb250YWN0Rm9ybUlkIiwiYWxlcnQiLCJyZWFkeSIsImNsaWNrIiwidG9nZ2xlQ2xhc3MiXSwibWFwcGluZ3MiOiIrUEFNQSxXQUNDLElBQWVBLEVBQVFDLEVBQU1DLEVBQU9DLEVBQUdDLEVBRXZDQyxFQUFZQyxTQUFTQyxlQUFnQixtQkFDckMsR0FBT0YsUUFLRixLQURMTCxFQUFTSyxFQUFVRyxxQkFBc0IsVUFBVyxJQVFwRCxRQUFLLEtBSExQLEVBQU9JLEVBQVVHLHFCQUFzQixNQUFPLElBRzlDLENBMEJBLElBckJBUCxFQUFLUSxhQUFjLGdCQUFpQixVQUM5QixJQUFNUixFQUFLUyxVQUFVQyxRQUFTLGNB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NkQsTUFDRzZELEtBQUssTUFDTFksR0FBR3NCLEtBQUsyRyxNQUFNdlEsRUFBRTJELGFBQWUzRCxFQUFFc0csUUFBUTlELGlCQUN6Q3VJLFNBQVMsa0JBTXRCbEwsRUFBTTJILFVBQVVtSCxXQUFhLFdBRWpCL1EsS0FFRDBJLFFBQVE1RixXQUVOL0QsU0FKRGlCLEtBSVk2SCxRQUpaN0gsS0FNRTRILGFBQWMsRUFOaEI1SCxLQVVFNEgsYUFBYyxJQVE1QjdGLEVBQUVpYixHQUFHcFEsTUFBUSxXQU9ULElBTkEsSUFLSXFRLEVBTEE3YSxFQUFJcEMsS0FDSmtaLEVBQU1ELFVBQVUsR0FDaEJpRSxFQUFPQyxNQUFNdlQsVUFBVXlNLE1BQU1qSyxLQUFLNk0sVUFBVyxHQUM3QzFCLEVBQUluVixFQUFFN0MsT0FHTFgsRUFBSSxFQUFHQSxFQUFJMlksRUFBRzNZLElBS2YsR0FKa0IsVUFBZDhOLFFBQU93TSxTQUFpQyxJQUFQQSxFQUNqQzlXLEVBQUV4RCxHQUFHZ08sTUFBUSxJQUFJM0ssRUFBTUcsRUFBRXhELEdBQUlzYSxHQUU3QitELEVBQU03YSxFQUFFeEQsR0FBR2dPLE1BQU1zTSxHQUFLa0UsTUFBTWhiLEVBQUV4RCxHQUFHZ08sTUFBT3NRLFFBQzFCLElBQVBELEVBQW9CLE9BQU9BLEVBRTFDLE9BQU83YSxLQzc2RmZyRCxTQUFTUyxpQkFBa0IsY0FBZSxTQUFVdVEsR0FFOUMsUUFBVUEsRUFBTXNOLE9BQU9DLGVBQzNCQyxNQUFPLGlDQUdOLEdDeEJIeGIsRUFBSUQsT0FFSkMsRUFBR2hELFVBQVd5ZSxNQUFPLFNBQVV6YixHQUU5QkEsRUFBRyxjQUFlMGIsTUFBTyxXQUNaMWIsRUFBRS9CLE1BQ2QrQixFQUFHL0IsTUFBTzBkLFlBQWEiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRmlsZSBuYXZpZ2F0aW9uLmpzLlxuICpcbiAqIEhhbmRsZXMgdG9nZ2xpbmcgdGhlIG5hdmlnYXRpb24gbWVudSBmb3Igc21hbGwgc2NyZWVucyBhbmQgZW5hYmxlcyBUQUIga2V5XG4gKiBuYXZpZ2F0aW9uIHN1cHBvcnQgZm9yIGRyb3Bkb3duIG1lbnVzLlxuICovXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgY29udGFpbmVyLCBidXR0b24sIG1lbnUsIGxpbmtzLCBpLCBsZW47XG5cblx0Y29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdzaXRlLW5hdmlnYXRpb24nICk7XG5cdGlmICggISBjb250YWluZXIgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0YnV0dG9uID0gY29udGFpbmVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnYnV0dG9uJyApWzBdO1xuXHRpZiAoICd1bmRlZmluZWQnID09PSB0eXBlb2YgYnV0dG9uICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdG1lbnUgPSBjb250YWluZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICd1bCcgKVswXTtcblxuXHQvLyBIaWRlIG1lbnUgdG9nZ2xlIGJ1dHRvbiBpZiBtZW51IGlzIGVtcHR5IGFuZCByZXR1cm4gZWFybHkuXG5cdGlmICggJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiBtZW51ICkge1xuXHRcdGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdG1lbnUuc2V0QXR0cmlidXRlKCAnYXJpYS1leHBhbmRlZCcsICdmYWxzZScgKTtcblx0aWYgKCAtMSA9PT0gbWVudS5jbGFzc05hbWUuaW5kZXhPZiggJ25hdi1tZW51JyApICkge1xuXHRcdG1lbnUuY2xhc3NOYW1lICs9ICcgbmF2LW1lbnUnO1xuXHR9XG5cblx0YnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIC0xICE9PSBjb250YWluZXIuY2xhc3NOYW1lLmluZGV4T2YoICd0b2dnbGVkJyApICkge1xuXHRcdFx0Y29udGFpbmVyLmNsYXNzTmFtZSA9IGNvbnRhaW5lci5jbGFzc05hbWUucmVwbGFjZSggJyB0b2dnbGVkJywgJycgKTtcblx0XHRcdGJ1dHRvbi5zZXRBdHRyaWJ1dGUoICdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyApO1xuXHRcdFx0bWVudS5zZXRBdHRyaWJ1dGUoICdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250YWluZXIuY2xhc3NOYW1lICs9ICcgdG9nZ2xlZCc7XG5cdFx0XHRidXR0b24uc2V0QXR0cmlidXRlKCAnYXJpYS1leHBhbmRlZCcsICd0cnVlJyApO1xuXHRcdFx0bWVudS5zZXRBdHRyaWJ1dGUoICdhcmlhLWV4cGFuZGVkJywgJ3RydWUnICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIEdldCBhbGwgdGhlIGxpbmsgZWxlbWVudHMgd2l0aGluIHRoZSBtZW51LlxuXHRsaW5rcyAgICA9IG1lbnUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICdhJyApO1xuXG5cdC8vIEVhY2ggdGltZSBhIG1lbnUgbGluayBpcyBmb2N1c2VkIG9yIGJsdXJyZWQsIHRvZ2dsZSBmb2N1cy5cblx0Zm9yICggaSA9IDAsIGxlbiA9IGxpbmtzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGxpbmtzW2ldLmFkZEV2ZW50TGlzdGVuZXIoICdmb2N1cycsIHRvZ2dsZUZvY3VzLCB0cnVlICk7XG5cdFx0bGlua3NbaV0uYWRkRXZlbnRMaXN0ZW5lciggJ2JsdXInLCB0b2dnbGVGb2N1cywgdHJ1ZSApO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgb3IgcmVtb3ZlcyAuZm9jdXMgY2xhc3Mgb24gYW4gZWxlbWVudC5cblx0ICovXG5cdGZ1bmN0aW9uIHRvZ2dsZUZvY3VzKCkge1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdC8vIE1vdmUgdXAgdGhyb3VnaCB0aGUgYW5jZXN0b3JzIG9mIHRoZSBjdXJyZW50IGxpbmsgdW50aWwgd2UgaGl0IC5uYXYtbWVudS5cblx0XHR3aGlsZSAoIC0xID09PSBzZWxmLmNsYXNzTmFtZS5pbmRleE9mKCAnbmF2LW1lbnUnICkgKSB7XG5cblx0XHRcdC8vIE9uIGxpIGVsZW1lbnRzIHRvZ2dsZSB0aGUgY2xhc3MgLmZvY3VzLlxuXHRcdFx0aWYgKCAnbGknID09PSBzZWxmLnRhZ05hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0aWYgKCAtMSAhPT0gc2VsZi5jbGFzc05hbWUuaW5kZXhPZiggJ2ZvY3VzJyApICkge1xuXHRcdFx0XHRcdHNlbGYuY2xhc3NOYW1lID0gc2VsZi5jbGFzc05hbWUucmVwbGFjZSggJyBmb2N1cycsICcnICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi5jbGFzc05hbWUgKz0gJyBmb2N1cyc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0c2VsZiA9IHNlbGYucGFyZW50RWxlbWVudDtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogVG9nZ2xlcyBgZm9jdXNgIGNsYXNzIHRvIGFsbG93IHN1Ym1lbnUgYWNjZXNzIG9uIHRhYmxldHMuXG5cdCAqL1xuXHQoIGZ1bmN0aW9uKCBjb250YWluZXIgKSB7XG5cdFx0dmFyIHRvdWNoU3RhcnRGbiwgaSxcblx0XHRcdHBhcmVudExpbmsgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCggJy5tZW51LWl0ZW0taGFzLWNoaWxkcmVuID4gYSwgLnBhZ2VfaXRlbV9oYXNfY2hpbGRyZW4gPiBhJyApO1xuXG5cdFx0aWYgKCAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgKSB7XG5cdFx0XHR0b3VjaFN0YXJ0Rm4gPSBmdW5jdGlvbiggZSApIHtcblx0XHRcdFx0dmFyIG1lbnVJdGVtID0gdGhpcy5wYXJlbnROb2RlLCBpO1xuXG5cdFx0XHRcdGlmICggISBtZW51SXRlbS5jbGFzc0xpc3QuY29udGFpbnMoICdmb2N1cycgKSApIHtcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBtZW51SXRlbS5wYXJlbnROb2RlLmNoaWxkcmVuLmxlbmd0aDsgKytpICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtZW51SXRlbSA9PT0gbWVudUl0ZW0ucGFyZW50Tm9kZS5jaGlsZHJlbltpXSApIHtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtZW51SXRlbS5wYXJlbnROb2RlLmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoICdmb2N1cycgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bWVudUl0ZW0uY2xhc3NMaXN0LmFkZCggJ2ZvY3VzJyApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG1lbnVJdGVtLmNsYXNzTGlzdC5yZW1vdmUoICdmb2N1cycgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCBwYXJlbnRMaW5rLmxlbmd0aDsgKytpICkge1xuXHRcdFx0XHRwYXJlbnRMaW5rW2ldLmFkZEV2ZW50TGlzdGVuZXIoICd0b3VjaHN0YXJ0JywgdG91Y2hTdGFydEZuLCBmYWxzZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSggY29udGFpbmVyICkgKTtcbn0gKSgpO1xuIiwiLyoqXG4gKiBGaWxlIHNraXAtbGluay1mb2N1cy1maXguanMuXG4gKlxuICogSGVscHMgd2l0aCBhY2Nlc3NpYmlsaXR5IGZvciBrZXlib2FyZCBvbmx5IHVzZXJzLlxuICpcbiAqIExlYXJuIG1vcmU6IGh0dHBzOi8vZ2l0LmlvL3ZXZHIyXG4gKi9cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpc0llID0gLyh0cmlkZW50fG1zaWUpL2kudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApO1xuXG5cdGlmICggaXNJZSAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ2hhc2hjaGFuZ2UnLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpZCA9IGxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKCAxICksXG5cdFx0XHRcdGVsZW1lbnQ7XG5cblx0XHRcdGlmICggISAoIC9eW0EtejAtOV8tXSskLy50ZXN0KCBpZCApICkgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRpZiAoIGVsZW1lbnQgKSB7XG5cdFx0XHRcdGlmICggISAoIC9eKD86YXxzZWxlY3R8aW5wdXR8YnV0dG9ufHRleHRhcmVhKSQvaS50ZXN0KCBlbGVtZW50LnRhZ05hbWUgKSApICkge1xuXHRcdFx0XHRcdGVsZW1lbnQudGFiSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVsZW1lbnQuZm9jdXMoKTtcblx0XHRcdH1cblx0XHR9LCBmYWxzZSApO1xuXHR9XG59ICkoKTtcbiIsIi8qXG4gICAgIF8gXyAgICAgIF8gICAgICAgX1xuIF9fX3wgKF8pIF9fX3wgfCBfXyAgKF8pX19fXG4vIF9ffCB8IHwvIF9ffCB8LyAvICB8IC8gX198XG5cXF9fIFxcIHwgfCAoX198ICAgPCBfIHwgXFxfXyBcXFxufF9fXy9ffF98XFxfX198X3xcXF8oXykvIHxfX18vXG4gICAgICAgICAgICAgICAgICAgfF9fL1xuXG4gVmVyc2lvbjogMS44LjFcbiAgQXV0aG9yOiBLZW4gV2hlZWxlclxuIFdlYnNpdGU6IGh0dHA6Ly9rZW53aGVlbGVyLmdpdGh1Yi5pb1xuICAgIERvY3M6IGh0dHA6Ly9rZW53aGVlbGVyLmdpdGh1Yi5pby9zbGlja1xuICAgIFJlcG86IGh0dHA6Ly9naXRodWIuY29tL2tlbndoZWVsZXIvc2xpY2tcbiAgSXNzdWVzOiBodHRwOi8vZ2l0aHViLmNvbS9rZW53aGVlbGVyL3NsaWNrL2lzc3Vlc1xuXG4gKi9cbi8qIGdsb2JhbCB3aW5kb3csIGRvY3VtZW50LCBkZWZpbmUsIGpRdWVyeSwgc2V0SW50ZXJ2YWwsIGNsZWFySW50ZXJ2YWwgKi9cbjsoZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3RvcnkoalF1ZXJ5KTtcbiAgICB9XG5cbn0oZnVuY3Rpb24oJCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgU2xpY2sgPSB3aW5kb3cuU2xpY2sgfHwge307XG5cbiAgICBTbGljayA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgaW5zdGFuY2VVaWQgPSAwO1xuXG4gICAgICAgIGZ1bmN0aW9uIFNsaWNrKGVsZW1lbnQsIHNldHRpbmdzKSB7XG5cbiAgICAgICAgICAgIHZhciBfID0gdGhpcywgZGF0YVNldHRpbmdzO1xuXG4gICAgICAgICAgICBfLmRlZmF1bHRzID0ge1xuICAgICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHk6IHRydWUsXG4gICAgICAgICAgICAgICAgYWRhcHRpdmVIZWlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFwcGVuZEFycm93czogJChlbGVtZW50KSxcbiAgICAgICAgICAgICAgICBhcHBlbmREb3RzOiAkKGVsZW1lbnQpLFxuICAgICAgICAgICAgICAgIGFycm93czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhc05hdkZvcjogbnVsbCxcbiAgICAgICAgICAgICAgICBwcmV2QXJyb3c6ICc8YnV0dG9uIGNsYXNzPVwic2xpY2stcHJldlwiIGFyaWEtbGFiZWw9XCJQcmV2aW91c1wiIHR5cGU9XCJidXR0b25cIj5QcmV2aW91czwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgbmV4dEFycm93OiAnPGJ1dHRvbiBjbGFzcz1cInNsaWNrLW5leHRcIiBhcmlhLWxhYmVsPVwiTmV4dFwiIHR5cGU9XCJidXR0b25cIj5OZXh0PC9idXR0b24+JyxcbiAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXV0b3BsYXlTcGVlZDogMzAwMCxcbiAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAnNTBweCcsXG4gICAgICAgICAgICAgICAgY3NzRWFzZTogJ2Vhc2UnLFxuICAgICAgICAgICAgICAgIGN1c3RvbVBhZ2luZzogZnVuY3Rpb24oc2xpZGVyLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiAvPicpLnRleHQoaSArIDEpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZG90czogZmFsc2UsXG4gICAgICAgICAgICAgICAgZG90c0NsYXNzOiAnc2xpY2stZG90cycsXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgICAgICAgICAgZWRnZUZyaWN0aW9uOiAwLjM1LFxuICAgICAgICAgICAgICAgIGZhZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGZvY3VzT25TZWxlY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGZvY3VzT25DaGFuZ2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGluaXRpYWxTbGlkZTogMCxcbiAgICAgICAgICAgICAgICBsYXp5TG9hZDogJ29uZGVtYW5kJyxcbiAgICAgICAgICAgICAgICBtb2JpbGVGaXJzdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Gb2N1czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uRG90c0hvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXNwb25kVG86ICd3aW5kb3cnLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IG51bGwsXG4gICAgICAgICAgICAgICAgcm93czogMSxcbiAgICAgICAgICAgICAgICBydGw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNsaWRlOiAnJyxcbiAgICAgICAgICAgICAgICBzbGlkZXNQZXJSb3c6IDEsXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgIHNwZWVkOiA1MDAsXG4gICAgICAgICAgICAgICAgc3dpcGU6IHRydWUsXG4gICAgICAgICAgICAgICAgc3dpcGVUb1NsaWRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0b3VjaE1vdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgdG91Y2hUaHJlc2hvbGQ6IDUsXG4gICAgICAgICAgICAgICAgdXNlQ1NTOiB0cnVlLFxuICAgICAgICAgICAgICAgIHVzZVRyYW5zZm9ybTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YXJpYWJsZVdpZHRoOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmVydGljYWxTd2lwaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB3YWl0Rm9yQW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IDEwMDBcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIF8uaW5pdGlhbHMgPSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkcmFnZ2luZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXV0b1BsYXlUaW1lcjogbnVsbCxcbiAgICAgICAgICAgICAgICBjdXJyZW50RGlyZWN0aW9uOiAwLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRMZWZ0OiBudWxsLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZTogMCxcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246IDEsXG4gICAgICAgICAgICAgICAgJGRvdHM6IG51bGwsXG4gICAgICAgICAgICAgICAgbGlzdFdpZHRoOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpc3RIZWlnaHQ6IG51bGwsXG4gICAgICAgICAgICAgICAgbG9hZEluZGV4OiAwLFxuICAgICAgICAgICAgICAgICRuZXh0QXJyb3c6IG51bGwsXG4gICAgICAgICAgICAgICAgJHByZXZBcnJvdzogbnVsbCxcbiAgICAgICAgICAgICAgICBzY3JvbGxpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNsaWRlQ291bnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgc2xpZGVXaWR0aDogbnVsbCxcbiAgICAgICAgICAgICAgICAkc2xpZGVUcmFjazogbnVsbCxcbiAgICAgICAgICAgICAgICAkc2xpZGVzOiBudWxsLFxuICAgICAgICAgICAgICAgIHNsaWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0OiAwLFxuICAgICAgICAgICAgICAgIHN3aXBlTGVmdDogbnVsbCxcbiAgICAgICAgICAgICAgICBzd2lwaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAkbGlzdDogbnVsbCxcbiAgICAgICAgICAgICAgICB0b3VjaE9iamVjdDoge30sXG4gICAgICAgICAgICAgICAgdHJhbnNmb3Jtc0VuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHVuc2xpY2tlZDogZmFsc2VcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICQuZXh0ZW5kKF8sIF8uaW5pdGlhbHMpO1xuXG4gICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBfLmFuaW1Qcm9wID0gbnVsbDtcbiAgICAgICAgICAgIF8uYnJlYWtwb2ludHMgPSBbXTtcbiAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzID0gW107XG4gICAgICAgICAgICBfLmNzc1RyYW5zaXRpb25zID0gZmFsc2U7XG4gICAgICAgICAgICBfLmZvY3Vzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBfLmhpZGRlbiA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgXy5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgXy5wb3NpdGlvblByb3AgPSBudWxsO1xuICAgICAgICAgICAgXy5yZXNwb25kVG8gPSBudWxsO1xuICAgICAgICAgICAgXy5yb3dDb3VudCA9IDE7XG4gICAgICAgICAgICBfLnNob3VsZENsaWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIF8uJHNsaWRlciA9ICQoZWxlbWVudCk7XG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IG51bGw7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAndmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICBfLndpbmRvd1dpZHRoID0gMDtcbiAgICAgICAgICAgIF8ud2luZG93VGltZXIgPSBudWxsO1xuXG4gICAgICAgICAgICBkYXRhU2V0dGluZ3MgPSAkKGVsZW1lbnQpLmRhdGEoJ3NsaWNrJykgfHwge307XG5cbiAgICAgICAgICAgIF8ub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBfLmRlZmF1bHRzLCBzZXR0aW5ncywgZGF0YVNldHRpbmdzKTtcblxuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuXG4gICAgICAgICAgICBfLm9yaWdpbmFsU2V0dGluZ3MgPSBfLm9wdGlvbnM7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQubW96SGlkZGVuICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIF8uaGlkZGVuID0gJ21vekhpZGRlbic7XG4gICAgICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ21venZpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQud2Via2l0SGlkZGVuICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIF8uaGlkZGVuID0gJ3dlYmtpdEhpZGRlbic7XG4gICAgICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ3dlYmtpdHZpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLmF1dG9QbGF5ID0gJC5wcm94eShfLmF1dG9QbGF5LCBfKTtcbiAgICAgICAgICAgIF8uYXV0b1BsYXlDbGVhciA9ICQucHJveHkoXy5hdXRvUGxheUNsZWFyLCBfKTtcbiAgICAgICAgICAgIF8uYXV0b1BsYXlJdGVyYXRvciA9ICQucHJveHkoXy5hdXRvUGxheUl0ZXJhdG9yLCBfKTtcbiAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUgPSAkLnByb3h5KF8uY2hhbmdlU2xpZGUsIF8pO1xuICAgICAgICAgICAgXy5jbGlja0hhbmRsZXIgPSAkLnByb3h5KF8uY2xpY2tIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8uc2VsZWN0SGFuZGxlciA9ICQucHJveHkoXy5zZWxlY3RIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8uc2V0UG9zaXRpb24gPSAkLnByb3h5KF8uc2V0UG9zaXRpb24sIF8pO1xuICAgICAgICAgICAgXy5zd2lwZUhhbmRsZXIgPSAkLnByb3h5KF8uc3dpcGVIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8uZHJhZ0hhbmRsZXIgPSAkLnByb3h5KF8uZHJhZ0hhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5rZXlIYW5kbGVyID0gJC5wcm94eShfLmtleUhhbmRsZXIsIF8pO1xuXG4gICAgICAgICAgICBfLmluc3RhbmNlVWlkID0gaW5zdGFuY2VVaWQrKztcblxuICAgICAgICAgICAgLy8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3NcbiAgICAgICAgICAgIC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uIChtdXN0IHN0YXJ0IHdpdGggPClcbiAgICAgICAgICAgIC8vIEV4dHJhY3RlZCBmcm9tIGpRdWVyeSB2MS4xMSBzb3VyY2VcbiAgICAgICAgICAgIF8uaHRtbEV4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSopJC87XG5cblxuICAgICAgICAgICAgXy5yZWdpc3RlckJyZWFrcG9pbnRzKCk7XG4gICAgICAgICAgICBfLmluaXQodHJ1ZSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBTbGljaztcblxuICAgIH0oKSk7XG5cbiAgICBTbGljay5wcm90b3R5cGUuYWN0aXZhdGVBREEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWFjdGl2ZScpLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ2ZhbHNlJ1xuICAgICAgICB9KS5maW5kKCdhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3QnKS5hdHRyKHtcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICcwJ1xuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYWRkU2xpZGUgPSBTbGljay5wcm90b3R5cGUuc2xpY2tBZGQgPSBmdW5jdGlvbihtYXJrdXAsIGluZGV4LCBhZGRCZWZvcmUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgYWRkQmVmb3JlID0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPCAwIHx8IChpbmRleCA+PSBfLnNsaWRlQ291bnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgIGlmICh0eXBlb2YoaW5kZXgpID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwICYmIF8uJHNsaWRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFkZEJlZm9yZSkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5pbnNlcnRCZWZvcmUoXy4kc2xpZGVzLmVxKGluZGV4KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5pbnNlcnRBZnRlcihfLiRzbGlkZXMuZXEoaW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhZGRCZWZvcmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkucHJlcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suYXBwZW5kKF8uJHNsaWRlcyk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgICQoZWxlbWVudCkuYXR0cignZGF0YS1zbGljay1pbmRleCcsIGluZGV4KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgXy5yZWluaXQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYW5pbWF0ZUhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxICYmIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgIF8uJGxpc3QuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0YXJnZXRIZWlnaHRcbiAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFuaW1hdGVTbGlkZSA9IGZ1bmN0aW9uKHRhcmdldExlZnQsIGNhbGxiYWNrKSB7XG5cbiAgICAgICAgdmFyIGFuaW1Qcm9wcyA9IHt9LFxuICAgICAgICAgICAgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hbmltYXRlSGVpZ2h0KCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IC10YXJnZXRMZWZ0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLnRyYW5zZm9ybXNFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHRvcDogdGFyZ2V0TGVmdFxuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudExlZnQgPSAtKF8uY3VycmVudExlZnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVN0YXJ0OiBfLmN1cnJlbnRMZWZ0XG4gICAgICAgICAgICAgICAgfSkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1TdGFydDogdGFyZ2V0TGVmdFxuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IF8ub3B0aW9ucy5zcGVlZCxcbiAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiBfLm9wdGlvbnMuZWFzaW5nLFxuICAgICAgICAgICAgICAgICAgICBzdGVwOiBmdW5jdGlvbihub3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdyA9IE1hdGguY2VpbChub3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3cgKyAncHgsIDBweCknO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUoMHB4LCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3cgKyAncHgpJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IE1hdGguY2VpbCh0YXJnZXRMZWZ0KTtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUzZCgnICsgdGFyZ2V0TGVmdCArICdweCwgMHB4LCAwcHgpJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoMHB4LCcgKyB0YXJnZXRMZWZ0ICsgJ3B4LCAwcHgpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcblxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfLmRpc2FibGVUcmFuc2l0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE5hdlRhcmdldCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gXy5vcHRpb25zLmFzTmF2Rm9yO1xuXG4gICAgICAgIGlmICggYXNOYXZGb3IgJiYgYXNOYXZGb3IgIT09IG51bGwgKSB7XG4gICAgICAgICAgICBhc05hdkZvciA9ICQoYXNOYXZGb3IpLm5vdChfLiRzbGlkZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFzTmF2Rm9yO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hc05hdkZvciA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYXNOYXZGb3IgPSBfLmdldE5hdlRhcmdldCgpO1xuXG4gICAgICAgIGlmICggYXNOYXZGb3IgIT09IG51bGwgJiYgdHlwZW9mIGFzTmF2Rm9yID09PSAnb2JqZWN0JyApIHtcbiAgICAgICAgICAgIGFzTmF2Rm9yLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9ICQodGhpcykuc2xpY2soJ2dldFNsaWNrJyk7XG4gICAgICAgICAgICAgICAgaWYoIXRhcmdldC51bnNsaWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnNsaWRlSGFuZGxlcihpbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXBwbHlUcmFuc2l0aW9uID0gZnVuY3Rpb24oc2xpZGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0cmFuc2l0aW9uID0ge307XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9IF8udHJhbnNmb3JtVHlwZSArICcgJyArIF8ub3B0aW9ucy5zcGVlZCArICdtcyAnICsgXy5vcHRpb25zLmNzc0Vhc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gJ29wYWNpdHkgJyArIF8ub3B0aW9ucy5zcGVlZCArICdtcyAnICsgXy5vcHRpb25zLmNzc0Vhc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZSkuY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xuXG4gICAgICAgIGlmICggXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgIF8uYXV0b1BsYXlUaW1lciA9IHNldEludGVydmFsKCBfLmF1dG9QbGF5SXRlcmF0b3IsIF8ub3B0aW9ucy5hdXRvcGxheVNwZWVkICk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXlDbGVhciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5hdXRvUGxheVRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKF8uYXV0b1BsYXlUaW1lcik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXlJdGVyYXRvciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlVG8gPSBfLmN1cnJlbnRTbGlkZSArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcblxuICAgICAgICBpZiAoICFfLnBhdXNlZCAmJiAhXy5pbnRlcnJ1cHRlZCAmJiAhXy5mb2N1c3NlZCApIHtcblxuICAgICAgICAgICAgaWYgKCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCBfLmRpcmVjdGlvbiA9PT0gMSAmJiAoIF8uY3VycmVudFNsaWRlICsgMSApID09PSAoIF8uc2xpZGVDb3VudCAtIDEgKSkge1xuICAgICAgICAgICAgICAgICAgICBfLmRpcmVjdGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIF8uZGlyZWN0aW9uID09PSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlVG8gPSBfLmN1cnJlbnRTbGlkZSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIF8uY3VycmVudFNsaWRlIC0gMSA9PT0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZGlyZWN0aW9uID0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKCBzbGlkZVRvICk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZEFycm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93ID0gJChfLm9wdGlvbnMucHJldkFycm93KS5hZGRDbGFzcygnc2xpY2stYXJyb3cnKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdyA9ICQoXy5vcHRpb25zLm5leHRBcnJvdykuYWRkQ2xhc3MoJ3NsaWNrLWFycm93Jyk7XG5cbiAgICAgICAgICAgIGlmKCBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1oaWRkZW4nKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiB0YWJpbmRleCcpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2staGlkZGVuJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXgnKTtcblxuICAgICAgICAgICAgICAgIGlmIChfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLnByZXZBcnJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnByZXBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kQXJyb3dzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5uZXh0QXJyb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hcHBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kQXJyb3dzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvd1xuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LmFkZCggXy4kbmV4dEFycm93IClcblxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhcmlhLWRpc2FibGVkJzogJ3RydWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGREb3RzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgaSwgZG90O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stZG90dGVkJyk7XG5cbiAgICAgICAgICAgIGRvdCA9ICQoJzx1bCAvPicpLmFkZENsYXNzKF8ub3B0aW9ucy5kb3RzQ2xhc3MpO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDw9IF8uZ2V0RG90Q291bnQoKTsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgZG90LmFwcGVuZCgkKCc8bGkgLz4nKS5hcHBlbmQoXy5vcHRpb25zLmN1c3RvbVBhZ2luZy5jYWxsKHRoaXMsIF8sIGkpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJGRvdHMgPSBkb3QuYXBwZW5kVG8oXy5vcHRpb25zLmFwcGVuZERvdHMpO1xuXG4gICAgICAgICAgICBfLiRkb3RzLmZpbmQoJ2xpJykuZmlyc3QoKS5hZGRDbGFzcygnc2xpY2stYWN0aXZlJyk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZE91dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPVxuICAgICAgICAgICAgXy4kc2xpZGVyXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKCBfLm9wdGlvbnMuc2xpZGUgKyAnOm5vdCguc2xpY2stY2xvbmVkKScpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xuXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgICQoZWxlbWVudClcbiAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIGluZGV4KVxuICAgICAgICAgICAgICAgIC5kYXRhKCdvcmlnaW5hbFN0eWxpbmcnLCAkKGVsZW1lbnQpLmF0dHIoJ3N0eWxlJykgfHwgJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlcicpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2sgPSAoXy5zbGlkZUNvdW50ID09PSAwKSA/XG4gICAgICAgICAgICAkKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykuYXBwZW5kVG8oXy4kc2xpZGVyKSA6XG4gICAgICAgICAgICBfLiRzbGlkZXMud3JhcEFsbCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLnBhcmVudCgpO1xuXG4gICAgICAgIF8uJGxpc3QgPSBfLiRzbGlkZVRyYWNrLndyYXAoXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNsaWNrLWxpc3RcIi8+JykucGFyZW50KCk7XG4gICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKCdvcGFjaXR5JywgMCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlIHx8IF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICAkKCdpbWdbZGF0YS1sYXp5XScsIF8uJHNsaWRlcikubm90KCdbc3JjXScpLmFkZENsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgXy5zZXR1cEluZmluaXRlKCk7XG5cbiAgICAgICAgXy5idWlsZEFycm93cygpO1xuXG4gICAgICAgIF8uYnVpbGREb3RzKCk7XG5cbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG5cblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRyYWdnYWJsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5hZGRDbGFzcygnZHJhZ2dhYmxlJyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRSb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBhLCBiLCBjLCBuZXdTbGlkZXMsIG51bU9mU2xpZGVzLCBvcmlnaW5hbFNsaWRlcyxzbGlkZXNQZXJTZWN0aW9uO1xuXG4gICAgICAgIG5ld1NsaWRlcyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgb3JpZ2luYWxTbGlkZXMgPSBfLiRzbGlkZXIuY2hpbGRyZW4oKTtcblxuICAgICAgICBpZihfLm9wdGlvbnMucm93cyA+IDApIHtcblxuICAgICAgICAgICAgc2xpZGVzUGVyU2VjdGlvbiA9IF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cgKiBfLm9wdGlvbnMucm93cztcbiAgICAgICAgICAgIG51bU9mU2xpZGVzID0gTWF0aC5jZWlsKFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLmxlbmd0aCAvIHNsaWRlc1BlclNlY3Rpb25cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGZvcihhID0gMDsgYSA8IG51bU9mU2xpZGVzOyBhKyspe1xuICAgICAgICAgICAgICAgIHZhciBzbGlkZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGZvcihiID0gMDsgYiA8IF8ub3B0aW9ucy5yb3dzOyBiKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICBmb3IoYyA9IDA7IGMgPCBfLm9wdGlvbnMuc2xpZGVzUGVyUm93OyBjKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAoYSAqIHNsaWRlc1BlclNlY3Rpb24gKyAoKGIgKiBfLm9wdGlvbnMuc2xpZGVzUGVyUm93KSArIGMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbFNsaWRlcy5nZXQodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChvcmlnaW5hbFNsaWRlcy5nZXQodGFyZ2V0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQocm93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3U2xpZGVzLmFwcGVuZENoaWxkKHNsaWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kc2xpZGVyLmVtcHR5KCkuYXBwZW5kKG5ld1NsaWRlcyk7XG4gICAgICAgICAgICBfLiRzbGlkZXIuY2hpbGRyZW4oKS5jaGlsZHJlbigpLmNoaWxkcmVuKClcbiAgICAgICAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzooMTAwIC8gXy5vcHRpb25zLnNsaWRlc1BlclJvdykgKyAnJScsXG4gICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JzogJ2lubGluZS1ibG9jaydcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrUmVzcG9uc2l2ZSA9IGZ1bmN0aW9uKGluaXRpYWwsIGZvcmNlVXBkYXRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYnJlYWtwb2ludCwgdGFyZ2V0QnJlYWtwb2ludCwgcmVzcG9uZFRvV2lkdGgsIHRyaWdnZXJCcmVha3BvaW50ID0gZmFsc2U7XG4gICAgICAgIHZhciBzbGlkZXJXaWR0aCA9IF8uJHNsaWRlci53aWR0aCgpO1xuICAgICAgICB2YXIgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCB8fCAkKHdpbmRvdykud2lkdGgoKTtcblxuICAgICAgICBpZiAoXy5yZXNwb25kVG8gPT09ICd3aW5kb3cnKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IHdpbmRvd1dpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKF8ucmVzcG9uZFRvID09PSAnc2xpZGVyJykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSBzbGlkZXJXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLnJlc3BvbmRUbyA9PT0gJ21pbicpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gTWF0aC5taW4od2luZG93V2lkdGgsIHNsaWRlcldpZHRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLnJlc3BvbnNpdmUgJiZcbiAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aCAmJlxuICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IG51bGw7XG5cbiAgICAgICAgICAgIGZvciAoYnJlYWtwb2ludCBpbiBfLmJyZWFrcG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludHMuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3JpZ2luYWxTZXR0aW5ncy5tb2JpbGVGaXJzdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25kVG9XaWR0aCA8IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gXy5icmVha3BvaW50c1ticmVha3BvaW50XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25kVG9XaWR0aCA+IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gXy5icmVha3BvaW50c1ticmVha3BvaW50XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRhcmdldEJyZWFrcG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRCcmVha3BvaW50ICE9PSBfLmFjdGl2ZUJyZWFrcG9pbnQgfHwgZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRTZXR0aW5nc1t0YXJnZXRCcmVha3BvaW50XSA9PT0gJ3Vuc2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5vcmlnaW5hbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVmcmVzaChpbml0aWFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRTZXR0aW5nc1t0YXJnZXRCcmVha3BvaW50XSA9PT0gJ3Vuc2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnVuc2xpY2sodGFyZ2V0QnJlYWtwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5vcmlnaW5hbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVmcmVzaChpbml0aWFsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucyA9IF8ub3JpZ2luYWxTZXR0aW5ncztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG9ubHkgdHJpZ2dlciBicmVha3BvaW50cyBkdXJpbmcgYW4gYWN0dWFsIGJyZWFrLiBub3Qgb24gaW5pdGlhbGl6ZS5cbiAgICAgICAgICAgIGlmKCAhaW5pdGlhbCAmJiB0cmlnZ2VyQnJlYWtwb2ludCAhPT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JyZWFrcG9pbnQnLCBbXywgdHJpZ2dlckJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGFuZ2VTbGlkZSA9IGZ1bmN0aW9uKGV2ZW50LCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICR0YXJnZXQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLFxuICAgICAgICAgICAgaW5kZXhPZmZzZXQsIHNsaWRlT2Zmc2V0LCB1bmV2ZW5PZmZzZXQ7XG5cbiAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIGEgbGluaywgcHJldmVudCBkZWZhdWx0IGFjdGlvbi5cbiAgICAgICAgaWYoJHRhcmdldC5pcygnYScpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIG5vdCB0aGUgPGxpPiBlbGVtZW50IChpZTogYSBjaGlsZCksIGZpbmQgdGhlIDxsaT4uXG4gICAgICAgIGlmKCEkdGFyZ2V0LmlzKCdsaScpKSB7XG4gICAgICAgICAgICAkdGFyZ2V0ID0gJHRhcmdldC5jbG9zZXN0KCdsaScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdW5ldmVuT2Zmc2V0ID0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCk7XG4gICAgICAgIGluZGV4T2Zmc2V0ID0gdW5ldmVuT2Zmc2V0ID8gMCA6IChfLnNsaWRlQ291bnQgLSBfLmN1cnJlbnRTbGlkZSkgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLm1lc3NhZ2UpIHtcblxuICAgICAgICAgICAgY2FzZSAncHJldmlvdXMnOlxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gaW5kZXhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgLSBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ25leHQnOlxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBpbmRleE9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmN1cnJlbnRTbGlkZSArIHNsaWRlT2Zmc2V0LCBmYWxzZSwgZG9udEFuaW1hdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnaW5kZXgnOlxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGV2ZW50LmRhdGEuaW5kZXggPT09IDAgPyAwIDpcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleCB8fCAkdGFyZ2V0LmluZGV4KCkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmNoZWNrTmF2aWdhYmxlKGluZGV4KSwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICAkdGFyZ2V0LmNoaWxkcmVuKCkudHJpZ2dlcignZm9jdXMnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hlY2tOYXZpZ2FibGUgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIG5hdmlnYWJsZXMsIHByZXZOYXZpZ2FibGU7XG5cbiAgICAgICAgbmF2aWdhYmxlcyA9IF8uZ2V0TmF2aWdhYmxlSW5kZXhlcygpO1xuICAgICAgICBwcmV2TmF2aWdhYmxlID0gMDtcbiAgICAgICAgaWYgKGluZGV4ID4gbmF2aWdhYmxlc1tuYXZpZ2FibGVzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICBpbmRleCA9IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIG4gaW4gbmF2aWdhYmxlcykge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IG5hdmlnYWJsZXNbbl0pIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBwcmV2TmF2aWdhYmxlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJldk5hdmlnYWJsZSA9IG5hdmlnYWJsZXNbbl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyAmJiBfLiRkb3RzICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cylcbiAgICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpXG4gICAgICAgICAgICAgICAgLm9mZignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKVxuICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRkb3RzLm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIub2ZmKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJyk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy4kcHJldkFycm93ICYmIF8uJHByZXZBcnJvdy5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cgJiYgXy4kbmV4dEFycm93Lm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93ICYmIF8uJHByZXZBcnJvdy5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaHN0YXJ0LnNsaWNrIG1vdXNlZG93bi5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNobW92ZS5zbGljayBtb3VzZW1vdmUuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hjYW5jZWwuc2xpY2sgbW91c2VsZWF2ZS5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcblxuICAgICAgICBfLiRsaXN0Lm9mZignY2xpY2suc2xpY2snLCBfLmNsaWNrSGFuZGxlcik7XG5cbiAgICAgICAgJChkb2N1bWVudCkub2ZmKF8udmlzaWJpbGl0eUNoYW5nZSwgXy52aXNpYmlsaXR5KTtcblxuICAgICAgICBfLmNsZWFuVXBTbGlkZUV2ZW50cygpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub2ZmKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5vcmllbnRhdGlvbkNoYW5nZSk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnJlc2l6ZSk7XG5cbiAgICAgICAgJCgnW2RyYWdnYWJsZSE9dHJ1ZV0nLCBfLiRzbGlkZVRyYWNrKS5vZmYoJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xuXG4gICAgICAgICQod2luZG93KS5vZmYoJ2xvYWQuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8uc2V0UG9zaXRpb24pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwU2xpZGVFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSk7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcFJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIG9yaWdpbmFsU2xpZGVzO1xuXG4gICAgICAgIGlmKF8ub3B0aW9ucy5yb3dzID4gMCkge1xuICAgICAgICAgICAgb3JpZ2luYWxTbGlkZXMgPSBfLiRzbGlkZXMuY2hpbGRyZW4oKS5jaGlsZHJlbigpO1xuICAgICAgICAgICAgb3JpZ2luYWxTbGlkZXMucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgICAgIF8uJHNsaWRlci5lbXB0eSgpLmFwcGVuZChvcmlnaW5hbFNsaWRlcyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uc2hvdWxkQ2xpY2sgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24ocmVmcmVzaCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG5cbiAgICAgICAgXy5jbGVhblVwRXZlbnRzKCk7XG5cbiAgICAgICAgJCgnLnNsaWNrLWNsb25lZCcsIF8uJHNsaWRlcikuZGV0YWNoKCk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMpIHtcbiAgICAgICAgICAgIF8uJGRvdHMucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ2Rpc3BsYXknLCcnKTtcblxuICAgICAgICAgICAgaWYgKCBfLmh0bWxFeHByLnRlc3QoIF8ub3B0aW9ucy5wcmV2QXJyb3cgKSkge1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8uJG5leHRBcnJvd1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQgc2xpY2stYXJyb3cgc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleCcpXG4gICAgICAgICAgICAgICAgLmNzcygnZGlzcGxheScsJycpO1xuXG4gICAgICAgICAgICBpZiAoIF8uaHRtbEV4cHIudGVzdCggXy5vcHRpb25zLm5leHRBcnJvdyApKSB7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoXy4kc2xpZGVzKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnQnKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKVxuICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignc3R5bGUnLCAkKHRoaXMpLmRhdGEoJ29yaWdpbmFsU3R5bGluZycpKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRsaXN0LmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIuYXBwZW5kKF8uJHNsaWRlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBfLmNsZWFuVXBSb3dzKCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZXInKTtcbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1pbml0aWFsaXplZCcpO1xuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRvdHRlZCcpO1xuXG4gICAgICAgIF8udW5zbGlja2VkID0gdHJ1ZTtcblxuICAgICAgICBpZighcmVmcmVzaCkge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2Rlc3Ryb3knLCBbX10pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmRpc2FibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24oc2xpZGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0cmFuc2l0aW9uID0ge307XG5cbiAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9ICcnO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlKS5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmFkZVNsaWRlID0gZnVuY3Rpb24oc2xpZGVJbmRleCwgY2FsbGJhY2spIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXhcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mYWRlU2xpZGVPdXQgPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDJcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmlsdGVyU2xpZGVzID0gU2xpY2sucHJvdG90eXBlLnNsaWNrRmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChmaWx0ZXIgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUuZmlsdGVyKGZpbHRlcikuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG5cbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mb2N1c0hhbmRsZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVyXG4gICAgICAgICAgICAub2ZmKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJylcbiAgICAgICAgICAgIC5vbignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycsICcqJywgZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB2YXIgJHNmID0gJCh0aGlzKTtcblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmKCBfLm9wdGlvbnMucGF1c2VPbkZvY3VzICkge1xuICAgICAgICAgICAgICAgICAgICBfLmZvY3Vzc2VkID0gJHNmLmlzKCc6Zm9jdXMnKTtcbiAgICAgICAgICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRDdXJyZW50ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrQ3VycmVudFNsaWRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICByZXR1cm4gXy5jdXJyZW50U2xpZGU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldERvdENvdW50ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIHZhciBicmVha1BvaW50ID0gMDtcbiAgICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgICB2YXIgcGFnZXJRdHkgPSAwO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwYWdlclF0eSA9IF8uc2xpZGVDb3VudDtcbiAgICAgICAgfSBlbHNlIGlmKCFfLm9wdGlvbnMuYXNOYXZGb3IpIHtcbiAgICAgICAgICAgIHBhZ2VyUXR5ID0gMSArIE1hdGguY2VpbCgoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpO1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICsrcGFnZXJRdHk7XG4gICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFnZXJRdHkgLSAxO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRMZWZ0ID0gZnVuY3Rpb24oc2xpZGVJbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRhcmdldExlZnQsXG4gICAgICAgICAgICB2ZXJ0aWNhbEhlaWdodCxcbiAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gMCxcbiAgICAgICAgICAgIHRhcmdldFNsaWRlLFxuICAgICAgICAgICAgY29lZjtcblxuICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcbiAgICAgICAgdmVydGljYWxIZWlnaHQgPSBfLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoXy5zbGlkZVdpZHRoICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgKiAtMTtcbiAgICAgICAgICAgICAgICBjb2VmID0gLTFcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IHRydWUgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZWYgPSAtMS41O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZWYgPSAtMlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKHZlcnRpY2FsSGVpZ2h0ICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgKiBjb2VmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsID4gXy5zbGlkZUNvdW50ICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggPiBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSAoc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudCkpICogXy5zbGlkZVdpZHRoKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSAoc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudCkpICogdmVydGljYWxIZWlnaHQpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpICogXy5zbGlkZVdpZHRoKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkgKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA+IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAtIF8uc2xpZGVDb3VudCkgKiBfLnNsaWRlV2lkdGg7XG4gICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAtIF8uc2xpZGVDb3VudCkgKiB2ZXJ0aWNhbEhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdykpIC8gMikgLSAoKF8uc2xpZGVXaWR0aCAqIF8uc2xpZGVDb3VudCkgLyAyKTtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgKz0gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMikgLSBfLnNsaWRlV2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCArPSBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKChzbGlkZUluZGV4ICogXy5zbGlkZVdpZHRoKSAqIC0xKSArIF8uc2xpZGVPZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKChzbGlkZUluZGV4ICogdmVydGljYWxIZWlnaHQpICogLTEpICsgdmVydGljYWxPZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IHRydWUpIHtcblxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IHx8IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0U2xpZGVbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLiRzbGlkZVRyYWNrLndpZHRoKCkgLSB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0IC0gdGFyZ2V0U2xpZGUud2lkdGgoKSkgKiAtMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gdGFyZ2V0U2xpZGVbMF0gPyB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0ICogLTEgOiAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgfHwgXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0U2xpZGVbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy4kc2xpZGVUcmFjay53aWR0aCgpIC0gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAtIHRhcmdldFNsaWRlLndpZHRoKCkpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gIDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gdGFyZ2V0U2xpZGVbMF0gPyB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0ICogLTEgOiAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgKz0gKF8uJGxpc3Qud2lkdGgoKSAtIHRhcmdldFNsaWRlLm91dGVyV2lkdGgoKSkgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldExlZnQ7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE9wdGlvbiA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0dldE9wdGlvbiA9IGZ1bmN0aW9uKG9wdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICByZXR1cm4gXy5vcHRpb25zW29wdGlvbl07XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE5hdmlnYWJsZUluZGV4ZXMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBicmVha1BvaW50ID0gMCxcbiAgICAgICAgICAgIGNvdW50ZXIgPSAwLFxuICAgICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgICAgbWF4O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBtYXggPSBfLnNsaWRlQ291bnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVha1BvaW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICogLTE7XG4gICAgICAgICAgICBjb3VudGVyID0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICogLTE7XG4gICAgICAgICAgICBtYXggPSBfLnNsaWRlQ291bnQgKiAyO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBtYXgpIHtcbiAgICAgICAgICAgIGluZGV4ZXMucHVzaChicmVha1BvaW50KTtcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXhlcztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0U2xpY2sgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0U2xpZGVDb3VudCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlc1RyYXZlcnNlZCwgc3dpcGVkU2xpZGUsIGNlbnRlck9mZnNldDtcblxuICAgICAgICBjZW50ZXJPZmZzZXQgPSBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSA/IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpIDogMDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stc2xpZGUnKS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBzbGlkZSkge1xuICAgICAgICAgICAgICAgIGlmIChzbGlkZS5vZmZzZXRMZWZ0IC0gY2VudGVyT2Zmc2V0ICsgKCQoc2xpZGUpLm91dGVyV2lkdGgoKSAvIDIpID4gKF8uc3dpcGVMZWZ0ICogLTEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXBlZFNsaWRlID0gc2xpZGU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2xpZGVzVHJhdmVyc2VkID0gTWF0aC5hYnMoJChzd2lwZWRTbGlkZSkuYXR0cignZGF0YS1zbGljay1pbmRleCcpIC0gXy5jdXJyZW50U2xpZGUpIHx8IDE7XG5cbiAgICAgICAgICAgIHJldHVybiBzbGlkZXNUcmF2ZXJzZWQ7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ29UbyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0dvVG8gPSBmdW5jdGlvbihzbGlkZSwgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4JyxcbiAgICAgICAgICAgICAgICBpbmRleDogcGFyc2VJbnQoc2xpZGUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGRvbnRBbmltYXRlKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKGNyZWF0aW9uKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICghJChfLiRzbGlkZXIpLmhhc0NsYXNzKCdzbGljay1pbml0aWFsaXplZCcpKSB7XG5cbiAgICAgICAgICAgICQoXy4kc2xpZGVyKS5hZGRDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKTtcblxuICAgICAgICAgICAgXy5idWlsZFJvd3MoKTtcbiAgICAgICAgICAgIF8uYnVpbGRPdXQoKTtcbiAgICAgICAgICAgIF8uc2V0UHJvcHMoKTtcbiAgICAgICAgICAgIF8uc3RhcnRMb2FkKCk7XG4gICAgICAgICAgICBfLmxvYWRTbGlkZXIoKTtcbiAgICAgICAgICAgIF8uaW5pdGlhbGl6ZUV2ZW50cygpO1xuICAgICAgICAgICAgXy51cGRhdGVBcnJvd3MoKTtcbiAgICAgICAgICAgIF8udXBkYXRlRG90cygpO1xuICAgICAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUodHJ1ZSk7XG4gICAgICAgICAgICBfLmZvY3VzSGFuZGxlcigpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3JlYXRpb24pIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdpbml0JywgW19dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5pbml0QURBKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcblxuICAgICAgICAgICAgXy5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRBREEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgICAgIG51bURvdEdyb3VwcyA9IE1hdGguY2VpbChfLnNsaWRlQ291bnQgLyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxcbiAgICAgICAgICAgICAgICB0YWJDb250cm9sSW5kZXhlcyA9IF8uZ2V0TmF2aWdhYmxlSW5kZXhlcygpLmZpbHRlcihmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh2YWwgPj0gMCkgJiYgKHZhbCA8IF8uc2xpZGVDb3VudCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmFkZChfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKSkuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgIH0pLmZpbmQoJ2EsIGlucHV0LCBidXR0b24sIHNlbGVjdCcpLmF0dHIoe1xuICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoXy4kZG90cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgXy4kc2xpZGVzLm5vdChfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKSkuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlQ29udHJvbEluZGV4ID0gdGFiQ29udHJvbEluZGV4ZXMuaW5kZXhPZihpKTtcblxuICAgICAgICAgICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ3RhYnBhbmVsJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ3NsaWNrLXNsaWRlJyArIF8uaW5zdGFuY2VVaWQgKyBpLFxuICAgICAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAtMVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlQ29udHJvbEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgIHZhciBhcmlhQnV0dG9uQ29udHJvbCA9ICdzbGljay1zbGlkZS1jb250cm9sJyArIF8uaW5zdGFuY2VVaWQgKyBzbGlkZUNvbnRyb2xJbmRleFxuICAgICAgICAgICAgICAgICAgIGlmICgkKCcjJyArIGFyaWFCdXR0b25Db250cm9sKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhQnV0dG9uQ29udHJvbFxuICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfLiRkb3RzLmF0dHIoJ3JvbGUnLCAndGFibGlzdCcpLmZpbmQoJ2xpJykuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hcHBlZFNsaWRlSW5kZXggPSB0YWJDb250cm9sSW5kZXhlc1tpXTtcblxuICAgICAgICAgICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ3ByZXNlbnRhdGlvbidcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnYnV0dG9uJykuZmlyc3QoKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgJ3JvbGUnOiAndGFiJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ3NsaWNrLXNsaWRlLWNvbnRyb2wnICsgXy5pbnN0YW5jZVVpZCArIGksXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLWNvbnRyb2xzJzogJ3NsaWNrLXNsaWRlJyArIF8uaW5zdGFuY2VVaWQgKyBtYXBwZWRTbGlkZUluZGV4LFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1sYWJlbCc6IChpICsgMSkgKyAnIG9mICcgKyBudW1Eb3RHcm91cHMsXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KS5lcShfLmN1cnJlbnRTbGlkZSkuZmluZCgnYnV0dG9uJykuYXR0cih7XG4gICAgICAgICAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogJzAnXG4gICAgICAgICAgICB9KS5lbmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGk9Xy5jdXJyZW50U2xpZGUsIG1heD1pK18ub3B0aW9ucy5zbGlkZXNUb1Nob3c7IGkgPCBtYXg7IGkrKykge1xuICAgICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPbkNoYW5nZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKGkpLmF0dHIoeyd0YWJpbmRleCc6ICcwJ30pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoaSkucmVtb3ZlQXR0cigndGFiaW5kZXgnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLmFjdGl2YXRlQURBKCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRBcnJvd0V2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJylcbiAgICAgICAgICAgICAgIC5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdwcmV2aW91cydcbiAgICAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93XG4gICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycpXG4gICAgICAgICAgICAgICAub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbmV4dCdcbiAgICAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdERvdEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKS5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4J1xuICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGRvdHMub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8ub3B0aW9ucy5wYXVzZU9uRG90c0hvdmVyID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0U2xpZGVFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMucGF1c2VPbkhvdmVyICkge1xuXG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpO1xuICAgICAgICAgICAgXy4kbGlzdC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0aWFsaXplRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uaW5pdEFycm93RXZlbnRzKCk7XG5cbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdzdGFydCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnbW92ZSdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnZW5kJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdlbmQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcblxuICAgICAgICBfLiRsaXN0Lm9uKCdjbGljay5zbGljaycsIF8uY2xpY2tIYW5kbGVyKTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vbihfLnZpc2liaWxpdHlDaGFuZ2UsICQucHJveHkoXy52aXNpYmlsaXR5LCBfKSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkKHdpbmRvdykub24oJ29yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCAkLnByb3h5KF8ub3JpZW50YXRpb25DaGFuZ2UsIF8pKTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgJC5wcm94eShfLnJlc2l6ZSwgXykpO1xuXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub24oJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xuXG4gICAgICAgICQod2luZG93KS5vbignbG9hZC5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG4gICAgICAgICQoXy5zZXRQb3NpdGlvbik7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRVSSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5zaG93KCk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cuc2hvdygpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRkb3RzLnNob3coKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmtleUhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgIC8vRG9udCBzbGlkZSBpZiB0aGUgY3Vyc29yIGlzIGluc2lkZSB0aGUgZm9ybSBmaWVsZHMgYW5kIGFycm93IGtleXMgYXJlIHByZXNzZWRcbiAgICAgICAgaWYoIWV2ZW50LnRhcmdldC50YWdOYW1lLm1hdGNoKCdURVhUQVJFQXxJTlBVVHxTRUxFQ1QnKSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM3ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IF8ub3B0aW9ucy5ydGwgPT09IHRydWUgPyAnbmV4dCcgOiAgJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM5ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IF8ub3B0aW9ucy5ydGwgPT09IHRydWUgPyAncHJldmlvdXMnIDogJ25leHQnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5sYXp5TG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGxvYWRSYW5nZSwgY2xvbmVSYW5nZSwgcmFuZ2VTdGFydCwgcmFuZ2VFbmQ7XG5cbiAgICAgICAgZnVuY3Rpb24gbG9hZEltYWdlcyhpbWFnZXNTY29wZSkge1xuXG4gICAgICAgICAgICAkKCdpbWdbZGF0YS1sYXp5XScsIGltYWdlc1Njb3BlKS5lYWNoKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGltYWdlID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTb3VyY2UgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtbGF6eScpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVNyY1NldCA9ICQodGhpcykuYXR0cignZGF0YS1zcmNzZXQnKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTaXplcyAgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtc2l6ZXMnKSB8fCBfLiRzbGlkZXIuYXR0cignZGF0YS1zaXplcycpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hbmltYXRlKHsgb3BhY2l0eTogMCB9LCAxMDAsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlU3JjU2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Jjc2V0JywgaW1hZ2VTcmNTZXQgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTaXplcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc2l6ZXMnLCBpbWFnZVNpemVzICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3JjJywgaW1hZ2VTb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hbmltYXRlKHsgb3BhY2l0eTogMSB9LCAyMDAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5IGRhdGEtc3Jjc2V0IGRhdGEtc2l6ZXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRlZCcsIFtfLCBpbWFnZSwgaW1hZ2VTb3VyY2VdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoICdkYXRhLWxhenknIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyggJ3NsaWNrLWxvYWRpbmcnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ3NsaWNrLWxhenlsb2FkLWVycm9yJyApO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZEVycm9yJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQuc3JjID0gaW1hZ2VTb3VyY2U7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5jdXJyZW50U2xpZGUgKyAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKTtcbiAgICAgICAgICAgICAgICByYW5nZUVuZCA9IHJhbmdlU3RhcnQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IE1hdGgubWF4KDAsIF8uY3VycmVudFNsaWRlIC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkpO1xuICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gMiArIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpICsgXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5vcHRpb25zLmluZmluaXRlID8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIF8uY3VycmVudFNsaWRlIDogXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICByYW5nZUVuZCA9IE1hdGguY2VpbChyYW5nZVN0YXJ0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VTdGFydCA+IDApIHJhbmdlU3RhcnQtLTtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VFbmQgPD0gXy5zbGlkZUNvdW50KSByYW5nZUVuZCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9hZFJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpLnNsaWNlKHJhbmdlU3RhcnQsIHJhbmdlRW5kKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmxhenlMb2FkID09PSAnYW50aWNpcGF0ZWQnKSB7XG4gICAgICAgICAgICB2YXIgcHJldlNsaWRlID0gcmFuZ2VTdGFydCAtIDEsXG4gICAgICAgICAgICAgICAgbmV4dFNsaWRlID0gcmFuZ2VFbmQsXG4gICAgICAgICAgICAgICAgJHNsaWRlcyA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChwcmV2U2xpZGUgPCAwKSBwcmV2U2xpZGUgPSBfLnNsaWRlQ291bnQgLSAxO1xuICAgICAgICAgICAgICAgIGxvYWRSYW5nZSA9IGxvYWRSYW5nZS5hZGQoJHNsaWRlcy5lcShwcmV2U2xpZGUpKTtcbiAgICAgICAgICAgICAgICBsb2FkUmFuZ2UgPSBsb2FkUmFuZ2UuYWRkKCRzbGlkZXMuZXEobmV4dFNsaWRlKSk7XG4gICAgICAgICAgICAgICAgcHJldlNsaWRlLS07XG4gICAgICAgICAgICAgICAgbmV4dFNsaWRlKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsb2FkSW1hZ2VzKGxvYWRSYW5nZSk7XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1jbG9uZWQnKS5zbGljZSgwLCBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPT09IDApIHtcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLWNsb25lZCcpLnNsaWNlKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKiAtMSk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmxvYWRTbGlkZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgXy5pbml0VUkoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmxhenlMb2FkID09PSAncHJvZ3Jlc3NpdmUnKSB7XG4gICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5uZXh0ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrTmV4dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbmV4dCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLm9yaWVudGF0aW9uQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKCk7XG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucGF1c2UgPSBTbGljay5wcm90b3R5cGUuc2xpY2tQYXVzZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcbiAgICAgICAgXy5wYXVzZWQgPSB0cnVlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wbGF5ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgIF8ub3B0aW9ucy5hdXRvcGxheSA9IHRydWU7XG4gICAgICAgIF8ucGF1c2VkID0gZmFsc2U7XG4gICAgICAgIF8uZm9jdXNzZWQgPSBmYWxzZTtcbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wb3N0U2xpZGUgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiggIV8udW5zbGlja2VkICkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYWZ0ZXJDaGFuZ2UnLCBbXywgaW5kZXhdKTtcblxuICAgICAgICAgICAgXy5hbmltYXRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG4gICAgICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmluaXRBREEoKTtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPbkNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGN1cnJlbnRTbGlkZSA9ICQoXy4kc2xpZGVzLmdldChfLmN1cnJlbnRTbGlkZSkpO1xuICAgICAgICAgICAgICAgICAgICAkY3VycmVudFNsaWRlLmF0dHIoJ3RhYmluZGV4JywgMCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wcmV2ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUHJldiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAncHJldmlvdXMnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJvZ3Jlc3NpdmVMYXp5TG9hZCA9IGZ1bmN0aW9uKCB0cnlDb3VudCApIHtcblxuICAgICAgICB0cnlDb3VudCA9IHRyeUNvdW50IHx8IDE7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgJGltZ3NUb0xvYWQgPSAkKCAnaW1nW2RhdGEtbGF6eV0nLCBfLiRzbGlkZXIgKSxcbiAgICAgICAgICAgIGltYWdlLFxuICAgICAgICAgICAgaW1hZ2VTb3VyY2UsXG4gICAgICAgICAgICBpbWFnZVNyY1NldCxcbiAgICAgICAgICAgIGltYWdlU2l6ZXMsXG4gICAgICAgICAgICBpbWFnZVRvTG9hZDtcblxuICAgICAgICBpZiAoICRpbWdzVG9Mb2FkLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgaW1hZ2UgPSAkaW1nc1RvTG9hZC5maXJzdCgpO1xuICAgICAgICAgICAgaW1hZ2VTb3VyY2UgPSBpbWFnZS5hdHRyKCdkYXRhLWxhenknKTtcbiAgICAgICAgICAgIGltYWdlU3JjU2V0ID0gaW1hZ2UuYXR0cignZGF0YS1zcmNzZXQnKTtcbiAgICAgICAgICAgIGltYWdlU2l6ZXMgID0gaW1hZ2UuYXR0cignZGF0YS1zaXplcycpIHx8IF8uJHNsaWRlci5hdHRyKCdkYXRhLXNpemVzJyk7XG4gICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmIChpbWFnZVNyY1NldCkge1xuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyY3NldCcsIGltYWdlU3JjU2V0ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlU2l6ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NpemVzJywgaW1hZ2VTaXplcyApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoICdzcmMnLCBpbWFnZVNvdXJjZSApXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLWxhenkgZGF0YS1zcmNzZXQgZGF0YS1zaXplcycpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uc2V0UG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRlZCcsIFsgXywgaW1hZ2UsIGltYWdlU291cmNlIF0pO1xuICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIHRyeUNvdW50IDwgMyApIHtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogdHJ5IHRvIGxvYWQgdGhlIGltYWdlIDMgdGltZXMsXG4gICAgICAgICAgICAgICAgICAgICAqIGxlYXZlIGEgc2xpZ2h0IGRlbGF5IHNvIHdlIGRvbid0IGdldFxuICAgICAgICAgICAgICAgICAgICAgKiBzZXJ2ZXJzIGJsb2NraW5nIHRoZSByZXF1ZXN0LlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoIHRyeUNvdW50ICsgMSApO1xuICAgICAgICAgICAgICAgICAgICB9LCA1MDAgKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCAnZGF0YS1sYXp5JyApXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoICdzbGljay1sb2FkaW5nJyApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoICdzbGljay1sYXp5bG9hZC1lcnJvcicgKTtcblxuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRFcnJvcicsIFsgXywgaW1hZ2UsIGltYWdlU291cmNlIF0pO1xuXG4gICAgICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5zcmMgPSBpbWFnZVNvdXJjZTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYWxsSW1hZ2VzTG9hZGVkJywgWyBfIF0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCBpbml0aWFsaXppbmcgKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBjdXJyZW50U2xpZGUsIGxhc3RWaXNpYmxlSW5kZXg7XG5cbiAgICAgICAgbGFzdFZpc2libGVJbmRleCA9IF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG5cbiAgICAgICAgLy8gaW4gbm9uLWluZmluaXRlIHNsaWRlcnMsIHdlIGRvbid0IHdhbnQgdG8gZ28gcGFzdCB0aGVcbiAgICAgICAgLy8gbGFzdCB2aXNpYmxlIGluZGV4LlxuICAgICAgICBpZiggIV8ub3B0aW9ucy5pbmZpbml0ZSAmJiAoIF8uY3VycmVudFNsaWRlID4gbGFzdFZpc2libGVJbmRleCApKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IGxhc3RWaXNpYmxlSW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBsZXNzIHNsaWRlcyB0aGFuIHRvIHNob3csIGdvIHRvIHN0YXJ0LlxuICAgICAgICBpZiAoIF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSAwO1xuXG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcblxuICAgICAgICBfLmRlc3Ryb3kodHJ1ZSk7XG5cbiAgICAgICAgJC5leHRlbmQoXywgXy5pbml0aWFscywgeyBjdXJyZW50U2xpZGU6IGN1cnJlbnRTbGlkZSB9KTtcblxuICAgICAgICBfLmluaXQoKTtcblxuICAgICAgICBpZiggIWluaXRpYWxpemluZyApIHtcblxuICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5kZXgnLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogY3VycmVudFNsaWRlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVnaXN0ZXJCcmVha3BvaW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgYnJlYWtwb2ludCwgY3VycmVudEJyZWFrcG9pbnQsIGwsXG4gICAgICAgICAgICByZXNwb25zaXZlU2V0dGluZ3MgPSBfLm9wdGlvbnMucmVzcG9uc2l2ZSB8fCBudWxsO1xuXG4gICAgICAgIGlmICggJC50eXBlKHJlc3BvbnNpdmVTZXR0aW5ncykgPT09ICdhcnJheScgJiYgcmVzcG9uc2l2ZVNldHRpbmdzLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgXy5yZXNwb25kVG8gPSBfLm9wdGlvbnMucmVzcG9uZFRvIHx8ICd3aW5kb3cnO1xuXG4gICAgICAgICAgICBmb3IgKCBicmVha3BvaW50IGluIHJlc3BvbnNpdmVTZXR0aW5ncyApIHtcblxuICAgICAgICAgICAgICAgIGwgPSBfLmJyZWFrcG9pbnRzLmxlbmd0aC0xO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNpdmVTZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShicmVha3BvaW50KSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50QnJlYWtwb2ludCA9IHJlc3BvbnNpdmVTZXR0aW5nc1ticmVha3BvaW50XS5icmVha3BvaW50O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgYnJlYWtwb2ludHMgYW5kIGN1dCBvdXQgYW55IGV4aXN0aW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uZXMgd2l0aCB0aGUgc2FtZSBicmVha3BvaW50IG51bWJlciwgd2UgZG9uJ3Qgd2FudCBkdXBlcy5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUoIGwgPj0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfLmJyZWFrcG9pbnRzW2xdICYmIF8uYnJlYWtwb2ludHNbbF0gPT09IGN1cnJlbnRCcmVha3BvaW50ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludHMuc3BsaWNlKGwsMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsLS07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnB1c2goY3VycmVudEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tjdXJyZW50QnJlYWtwb2ludF0gPSByZXNwb25zaXZlU2V0dGluZ3NbYnJlYWtwb2ludF0uc2V0dGluZ3M7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5icmVha3BvaW50cy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCBfLm9wdGlvbnMubW9iaWxlRmlyc3QgKSA/IGEtYiA6IGItYTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVpbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlcyA9XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKF8ub3B0aW9ucy5zbGlkZSlcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgXy5zbGlkZUNvdW50ID0gXy4kc2xpZGVzLmxlbmd0aDtcblxuICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50ICYmIF8uY3VycmVudFNsaWRlICE9PSAwKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8uY3VycmVudFNsaWRlIC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBfLnJlZ2lzdGVyQnJlYWtwb2ludHMoKTtcblxuICAgICAgICBfLnNldFByb3BzKCk7XG4gICAgICAgIF8uc2V0dXBJbmZpbml0ZSgpO1xuICAgICAgICBfLmJ1aWxkQXJyb3dzKCk7XG4gICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG4gICAgICAgIF8uaW5pdEFycm93RXZlbnRzKCk7XG4gICAgICAgIF8uYnVpbGREb3RzKCk7XG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuICAgICAgICBfLmluaXREb3RFdmVudHMoKTtcbiAgICAgICAgXy5jbGVhblVwU2xpZGVFdmVudHMoKTtcbiAgICAgICAgXy5pbml0U2xpZGVFdmVudHMoKTtcblxuICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZShmYWxzZSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oJ2NsaWNrLnNsaWNrJywgXy5zZWxlY3RIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKHR5cGVvZiBfLmN1cnJlbnRTbGlkZSA9PT0gJ251bWJlcicgPyBfLmN1cnJlbnRTbGlkZSA6IDApO1xuXG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcbiAgICAgICAgXy5mb2N1c0hhbmRsZXIoKTtcblxuICAgICAgICBfLnBhdXNlZCA9ICFfLm9wdGlvbnMuYXV0b3BsYXk7XG4gICAgICAgIF8uYXV0b1BsYXkoKTtcblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcigncmVJbml0JywgW19dKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSAhPT0gXy53aW5kb3dXaWR0aCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF8ud2luZG93RGVsYXkpO1xuICAgICAgICAgICAgXy53aW5kb3dEZWxheSA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF8ud2luZG93V2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTtcbiAgICAgICAgICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSgpO1xuICAgICAgICAgICAgICAgIGlmKCAhXy51bnNsaWNrZWQgKSB7IF8uc2V0UG9zaXRpb24oKTsgfVxuICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZW1vdmVTbGlkZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1JlbW92ZSA9IGZ1bmN0aW9uKGluZGV4LCByZW1vdmVCZWZvcmUsIHJlbW92ZUFsbCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICByZW1vdmVCZWZvcmUgPSBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ID0gcmVtb3ZlQmVmb3JlID09PSB0cnVlID8gMCA6IF8uc2xpZGVDb3VudCAtIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbmRleCA9IHJlbW92ZUJlZm9yZSA9PT0gdHJ1ZSA/IC0taW5kZXggOiBpbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPCAxIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+IF8uc2xpZGVDb3VudCAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgaWYgKHJlbW92ZUFsbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbigpLnJlbW92ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmVxKGluZGV4KS5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlcyA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5hcHBlbmQoXy4kc2xpZGVzKTtcblxuICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRDU1MgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHBvc2l0aW9uUHJvcHMgPSB7fSxcbiAgICAgICAgICAgIHgsIHk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gLXBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHggPSBfLnBvc2l0aW9uUHJvcCA9PSAnbGVmdCcgPyBNYXRoLmNlaWwocG9zaXRpb24pICsgJ3B4JyA6ICcwcHgnO1xuICAgICAgICB5ID0gXy5wb3NpdGlvblByb3AgPT0gJ3RvcCcgPyBNYXRoLmNlaWwocG9zaXRpb24pICsgJ3B4JyA6ICcwcHgnO1xuXG4gICAgICAgIHBvc2l0aW9uUHJvcHNbXy5wb3NpdGlvblByb3BdID0gcG9zaXRpb247XG5cbiAgICAgICAgaWYgKF8udHJhbnNmb3Jtc0VuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvc2l0aW9uUHJvcHMgPSB7fTtcbiAgICAgICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKCcgKyB4ICsgJywgJyArIHkgKyAnKSc7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoJyArIHggKyAnLCAnICsgeSArICcsIDBweCknO1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldERpbWVuc2lvbnMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGxpc3QuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogKCcwcHggJyArIF8ub3B0aW9ucy5jZW50ZXJQYWRkaW5nKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kbGlzdC5oZWlnaHQoXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGxpc3QuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogKF8ub3B0aW9ucy5jZW50ZXJQYWRkaW5nICsgJyAwcHgnKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy5saXN0V2lkdGggPSBfLiRsaXN0LndpZHRoKCk7XG4gICAgICAgIF8ubGlzdEhlaWdodCA9IF8uJGxpc3QuaGVpZ2h0KCk7XG5cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSAmJiBfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc2xpZGVXaWR0aCA9IE1hdGguY2VpbChfLmxpc3RXaWR0aCAvIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay53aWR0aChNYXRoLmNlaWwoKF8uc2xpZGVXaWR0aCAqIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmxlbmd0aCkpKTtcblxuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLndpZHRoKDUwMDAgKiBfLnNsaWRlQ291bnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5zbGlkZVdpZHRoID0gTWF0aC5jZWlsKF8ubGlzdFdpZHRoKTtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suaGVpZ2h0KE1hdGguY2VpbCgoXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSkgKiBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5sZW5ndGgpKSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb2Zmc2V0ID0gXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJXaWR0aCh0cnVlKSAtIF8uJHNsaWRlcy5maXJzdCgpLndpZHRoKCk7XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gZmFsc2UpIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLndpZHRoKF8uc2xpZGVXaWR0aCAtIG9mZnNldCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldEZhZGUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0YXJnZXRMZWZ0O1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uc2xpZGVXaWR0aCAqIGluZGV4KSAqIC0xO1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogdGFyZ2V0TGVmdCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRhcmdldExlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMixcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLmNzcyh7XG4gICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAxLFxuICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxICYmIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgIF8uJGxpc3QuY3NzKCdoZWlnaHQnLCB0YXJnZXRIZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldE9wdGlvbiA9XG4gICAgU2xpY2sucHJvdG90eXBlLnNsaWNrU2V0T3B0aW9uID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFjY2VwdHMgYXJndW1lbnRzIGluIGZvcm1hdCBvZjpcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIGNoYW5naW5nIGEgc2luZ2xlIG9wdGlvbidzIHZhbHVlOlxuICAgICAgICAgKiAgICAgLnNsaWNrKFwic2V0T3B0aW9uXCIsIG9wdGlvbiwgdmFsdWUsIHJlZnJlc2ggKVxuICAgICAgICAgKlxuICAgICAgICAgKiAgLSBmb3IgY2hhbmdpbmcgYSBzZXQgb2YgcmVzcG9uc2l2ZSBvcHRpb25zOlxuICAgICAgICAgKiAgICAgLnNsaWNrKFwic2V0T3B0aW9uXCIsICdyZXNwb25zaXZlJywgW3t9LCAuLi5dLCByZWZyZXNoIClcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIHVwZGF0aW5nIG11bHRpcGxlIHZhbHVlcyBhdCBvbmNlIChub3QgcmVzcG9uc2l2ZSlcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCB7ICdvcHRpb24nOiB2YWx1ZSwgLi4uIH0sIHJlZnJlc2ggKVxuICAgICAgICAgKi9cblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGwsIGl0ZW0sIG9wdGlvbiwgdmFsdWUsIHJlZnJlc2ggPSBmYWxzZSwgdHlwZTtcblxuICAgICAgICBpZiggJC50eXBlKCBhcmd1bWVudHNbMF0gKSA9PT0gJ29iamVjdCcgKSB7XG5cbiAgICAgICAgICAgIG9wdGlvbiA9ICBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICByZWZyZXNoID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgdHlwZSA9ICdtdWx0aXBsZSc7XG5cbiAgICAgICAgfSBlbHNlIGlmICggJC50eXBlKCBhcmd1bWVudHNbMF0gKSA9PT0gJ3N0cmluZycgKSB7XG5cbiAgICAgICAgICAgIG9wdGlvbiA9ICBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICB2YWx1ZSA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHJlZnJlc2ggPSBhcmd1bWVudHNbMl07XG5cbiAgICAgICAgICAgIGlmICggYXJndW1lbnRzWzBdID09PSAncmVzcG9uc2l2ZScgJiYgJC50eXBlKCBhcmd1bWVudHNbMV0gKSA9PT0gJ2FycmF5JyApIHtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSAncmVzcG9uc2l2ZSc7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHR5cGVvZiBhcmd1bWVudHNbMV0gIT09ICd1bmRlZmluZWQnICkge1xuXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdzaW5nbGUnO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggdHlwZSA9PT0gJ3NpbmdsZScgKSB7XG5cbiAgICAgICAgICAgIF8ub3B0aW9uc1tvcHRpb25dID0gdmFsdWU7XG5cblxuICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAnbXVsdGlwbGUnICkge1xuXG4gICAgICAgICAgICAkLmVhY2goIG9wdGlvbiAsIGZ1bmN0aW9uKCBvcHQsIHZhbCApIHtcblxuICAgICAgICAgICAgICAgIF8ub3B0aW9uc1tvcHRdID0gdmFsO1xuXG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgIH0gZWxzZSBpZiAoIHR5cGUgPT09ICdyZXNwb25zaXZlJyApIHtcblxuICAgICAgICAgICAgZm9yICggaXRlbSBpbiB2YWx1ZSApIHtcblxuICAgICAgICAgICAgICAgIGlmKCAkLnR5cGUoIF8ub3B0aW9ucy5yZXNwb25zaXZlICkgIT09ICdhcnJheScgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUgPSBbIHZhbHVlW2l0ZW1dIF07XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGwgPSBfLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGgtMTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIHJlc3BvbnNpdmUgb2JqZWN0IGFuZCBzcGxpY2Ugb3V0IGR1cGxpY2F0ZXMuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCBsID49IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfLm9wdGlvbnMucmVzcG9uc2l2ZVtsXS5icmVha3BvaW50ID09PSB2YWx1ZVtpdGVtXS5icmVha3BvaW50ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUuc3BsaWNlKGwsMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5wdXNoKCB2YWx1ZVtpdGVtXSApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggcmVmcmVzaCApIHtcblxuICAgICAgICAgICAgXy51bmxvYWQoKTtcbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLnNldERpbWVuc2lvbnMoKTtcblxuICAgICAgICBfLnNldEhlaWdodCgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc2V0Q1NTKF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5zZXRGYWRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignc2V0UG9zaXRpb24nLCBbX10pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRQcm9wcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJvZHlTdHlsZSA9IGRvY3VtZW50LmJvZHkuc3R5bGU7XG5cbiAgICAgICAgXy5wb3NpdGlvblByb3AgPSBfLm9wdGlvbnMudmVydGljYWwgPT09IHRydWUgPyAndG9wJyA6ICdsZWZ0JztcblxuICAgICAgICBpZiAoXy5wb3NpdGlvblByb3AgPT09ICd0b3AnKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLXZlcnRpY2FsJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLXZlcnRpY2FsJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keVN0eWxlLldlYmtpdFRyYW5zaXRpb24gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgYm9keVN0eWxlLk1velRyYW5zaXRpb24gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgYm9keVN0eWxlLm1zVHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnVzZUNTUyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY3NzVHJhbnNpdGlvbnMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuZmFkZSApIHtcbiAgICAgICAgICAgIGlmICggdHlwZW9mIF8ub3B0aW9ucy56SW5kZXggPT09ICdudW1iZXInICkge1xuICAgICAgICAgICAgICAgIGlmKCBfLm9wdGlvbnMuekluZGV4IDwgMyApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IDM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLm9wdGlvbnMuekluZGV4ID0gXy5kZWZhdWx0cy56SW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keVN0eWxlLk9UcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdPVHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctby10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdPVHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUuTW96VHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnTW96VHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctbW96LXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ01velRyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLk1velBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLndlYmtpdFRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ3dlYmtpdFRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLXdlYmtpdC10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICd3ZWJraXRUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS53ZWJraXRQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5tc1RyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ21zVHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctbXMtdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnbXNUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUubXNUcmFuc2Zvcm0gPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUudHJhbnNmb3JtICE9PSB1bmRlZmluZWQgJiYgXy5hbmltVHlwZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAndHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICd0cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICd0cmFuc2l0aW9uJztcbiAgICAgICAgfVxuICAgICAgICBfLnRyYW5zZm9ybXNFbmFibGVkID0gXy5vcHRpb25zLnVzZVRyYW5zZm9ybSAmJiAoXy5hbmltVHlwZSAhPT0gbnVsbCAmJiBfLmFuaW1UeXBlICE9PSBmYWxzZSk7XG4gICAgfTtcblxuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldFNsaWRlQ2xhc3NlcyA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0LCBhbGxTbGlkZXMsIGluZGV4T2Zmc2V0LCByZW1haW5kZXI7XG5cbiAgICAgICAgYWxsU2xpZGVzID0gXy4kc2xpZGVyXG4gICAgICAgICAgICAuZmluZCgnLnNsaWNrLXNsaWRlJylcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAuZXEoaW5kZXgpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWN1cnJlbnQnKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgdmFyIGV2ZW5Db2VmID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAlIDIgPT09IDAgPyAxIDogMDtcblxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSBjZW50ZXJPZmZzZXQgJiYgaW5kZXggPD0gKF8uc2xpZGVDb3VudCAtIDEpIC0gY2VudGVyT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4IC0gY2VudGVyT2Zmc2V0ICsgZXZlbkNvZWYsIGluZGV4ICsgY2VudGVyT2Zmc2V0ICsgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpbmRleE9mZnNldCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQgLSBjZW50ZXJPZmZzZXQgKyAxICsgZXZlbkNvZWYsIGluZGV4T2Zmc2V0ICsgY2VudGVyT2Zmc2V0ICsgMilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXEoYWxsU2xpZGVzLmxlbmd0aCAtIDEgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IF8uc2xpZGVDb3VudCAtIDEpIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lcShfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAuZXEoaW5kZXgpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8PSAoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykpIHtcblxuICAgICAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXgsIGluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGxTbGlkZXMubGVuZ3RoIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgcmVtYWluZGVyID0gXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgICAgICBpbmRleE9mZnNldCA9IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSA/IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBpbmRleCA6IGluZGV4O1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICYmIChfLnNsaWRlQ291bnQgLSBpbmRleCkgPCBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQgLSAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIHJlbWFpbmRlciksIGluZGV4T2Zmc2V0ICsgcmVtYWluZGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0LCBpbmRleE9mZnNldCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmxhenlMb2FkID09PSAnb25kZW1hbmQnIHx8IF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ2FudGljaXBhdGVkJykge1xuICAgICAgICAgICAgXy5sYXp5TG9hZCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXR1cEluZmluaXRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgaSwgc2xpZGVJbmRleCwgaW5maW5pdGVDb3VudDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8ub3B0aW9ucy5jZW50ZXJNb2RlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlICYmIF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBzbGlkZUluZGV4ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gXy5zbGlkZUNvdW50OyBpID4gKF8uc2xpZGVDb3VudCAtXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50KTsgaSAtPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlSW5kZXggPSBpIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgJChfLiRzbGlkZXNbc2xpZGVJbmRleF0pLmNsb25lKHRydWUpLmF0dHIoJ2lkJywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAucHJlcGVuZFRvKF8uJHNsaWRlVHJhY2spLmFkZENsYXNzKCdzbGljay1jbG9uZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGluZmluaXRlQ291bnQgICsgXy5zbGlkZUNvdW50OyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICQoXy4kc2xpZGVzW3NsaWRlSW5kZXhdKS5jbG9uZSh0cnVlKS5hdHRyKCdpZCcsICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBzbGlkZUluZGV4ICsgXy5zbGlkZUNvdW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spLmFkZENsYXNzKCdzbGljay1jbG9uZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykuZmluZCgnW2lkXScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignaWQnLCAnJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmludGVycnVwdCA9IGZ1bmN0aW9uKCB0b2dnbGUgKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmKCAhdG9nZ2xlICkge1xuICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICB9XG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0b2dnbGU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNlbGVjdEhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9XG4gICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkuaXMoJy5zbGljay1zbGlkZScpID9cbiAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkgOlxuICAgICAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5wYXJlbnRzKCcuc2xpY2stc2xpZGUnKTtcblxuICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludCh0YXJnZXRFbGVtZW50LmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKSk7XG5cbiAgICAgICAgaWYgKCFpbmRleCkgaW5kZXggPSAwO1xuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihpbmRleCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIH1cblxuICAgICAgICBfLnNsaWRlSGFuZGxlcihpbmRleCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNsaWRlSGFuZGxlciA9IGZ1bmN0aW9uKGluZGV4LCBzeW5jLCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciB0YXJnZXRTbGlkZSwgYW5pbVNsaWRlLCBvbGRTbGlkZSwgc2xpZGVMZWZ0LCB0YXJnZXRMZWZ0ID0gbnVsbCxcbiAgICAgICAgICAgIF8gPSB0aGlzLCBuYXZUYXJnZXQ7XG5cbiAgICAgICAgc3luYyA9IHN5bmMgfHwgZmFsc2U7XG5cbiAgICAgICAgaWYgKF8uYW5pbWF0aW5nID09PSB0cnVlICYmIF8ub3B0aW9ucy53YWl0Rm9yQW5pbWF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlICYmIF8uY3VycmVudFNsaWRlID09PSBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLmFzTmF2Rm9yKGluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldFNsaWRlID0gaW5kZXg7XG4gICAgICAgIHRhcmdldExlZnQgPSBfLmdldExlZnQodGFyZ2V0U2xpZGUpO1xuICAgICAgICBzbGlkZUxlZnQgPSBfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIF8uY3VycmVudExlZnQgPSBfLnN3aXBlTGVmdCA9PT0gbnVsbCA/IHNsaWRlTGVmdCA6IF8uc3dpcGVMZWZ0O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSBmYWxzZSAmJiAoaW5kZXggPCAwIHx8IGluZGV4ID4gXy5nZXREb3RDb3VudCgpICogXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUoc2xpZGVMZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIChpbmRleCA8IDAgfHwgaW5kZXggPiAoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHNsaWRlTGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoXy5hdXRvUGxheVRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXRTbGlkZSA8IDApIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSBfLnNsaWRlQ291bnQgLSAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gXy5zbGlkZUNvdW50ICsgdGFyZ2V0U2xpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0U2xpZGUgPj0gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gdGFyZ2V0U2xpZGUgLSBfLnNsaWRlQ291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbmltU2xpZGUgPSB0YXJnZXRTbGlkZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYmVmb3JlQ2hhbmdlJywgW18sIF8uY3VycmVudFNsaWRlLCBhbmltU2xpZGVdKTtcblxuICAgICAgICBvbGRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IGFuaW1TbGlkZTtcblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3NlcyhfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXNOYXZGb3IgKSB7XG5cbiAgICAgICAgICAgIG5hdlRhcmdldCA9IF8uZ2V0TmF2VGFyZ2V0KCk7XG4gICAgICAgICAgICBuYXZUYXJnZXQgPSBuYXZUYXJnZXQuc2xpY2soJ2dldFNsaWNrJyk7XG5cbiAgICAgICAgICAgIGlmICggbmF2VGFyZ2V0LnNsaWRlQ291bnQgPD0gbmF2VGFyZ2V0Lm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgICAgIG5hdlRhcmdldC5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgXy51cGRhdGVBcnJvd3MoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgXy5mYWRlU2xpZGVPdXQob2xkU2xpZGUpO1xuXG4gICAgICAgICAgICAgICAgXy5mYWRlU2xpZGUoYW5pbVNsaWRlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXy5hbmltYXRlSGVpZ2h0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUodGFyZ2V0TGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zdGFydExvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cuaGlkZSgpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LmhpZGUoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kZG90cy5oaWRlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZURpcmVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciB4RGlzdCwgeURpc3QsIHIsIHN3aXBlQW5nbGUsIF8gPSB0aGlzO1xuXG4gICAgICAgIHhEaXN0ID0gXy50b3VjaE9iamVjdC5zdGFydFggLSBfLnRvdWNoT2JqZWN0LmN1clg7XG4gICAgICAgIHlEaXN0ID0gXy50b3VjaE9iamVjdC5zdGFydFkgLSBfLnRvdWNoT2JqZWN0LmN1clk7XG4gICAgICAgIHIgPSBNYXRoLmF0YW4yKHlEaXN0LCB4RGlzdCk7XG5cbiAgICAgICAgc3dpcGVBbmdsZSA9IE1hdGgucm91bmQociAqIDE4MCAvIE1hdGguUEkpO1xuICAgICAgICBpZiAoc3dpcGVBbmdsZSA8IDApIHtcbiAgICAgICAgICAgIHN3aXBlQW5nbGUgPSAzNjAgLSBNYXRoLmFicyhzd2lwZUFuZ2xlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA8PSA0NSkgJiYgKHN3aXBlQW5nbGUgPj0gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAnbGVmdCcgOiAncmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPD0gMzYwKSAmJiAoc3dpcGVBbmdsZSA+PSAzMTUpKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ2xlZnQnIDogJ3JpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlID49IDEzNSkgJiYgKHN3aXBlQW5nbGUgPD0gMjI1KSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdyaWdodCcgOiAnbGVmdCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPj0gMzUpICYmIChzd2lwZUFuZ2xlIDw9IDEzNSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Rvd24nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3VwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAndmVydGljYWwnO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZUVuZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVDb3VudCxcbiAgICAgICAgICAgIGRpcmVjdGlvbjtcblxuICAgICAgICBfLmRyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIF8uc3dpcGluZyA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChfLnNjcm9sbGluZykge1xuICAgICAgICAgICAgXy5zY3JvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcbiAgICAgICAgXy5zaG91bGRDbGljayA9ICggXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+IDEwICkgPyBmYWxzZSA6IHRydWU7XG5cbiAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LmN1clggPT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5lZGdlSGl0ID09PSB0cnVlICkge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2VkZ2UnLCBbXywgXy5zd2lwZURpcmVjdGlvbigpIF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID49IF8udG91Y2hPYmplY3QubWluU3dpcGUgKSB7XG5cbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IF8uc3dpcGVEaXJlY3Rpb24oKTtcblxuICAgICAgICAgICAgc3dpdGNoICggZGlyZWN0aW9uICkge1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZG93bic6XG5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVDb3VudCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmNoZWNrTmF2aWdhYmxlKCBfLmN1cnJlbnRTbGlkZSArIF8uZ2V0U2xpZGVDb3VudCgpICkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlICsgXy5nZXRTbGlkZUNvdW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50RGlyZWN0aW9uID0gMDtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICBjYXNlICd1cCc6XG5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVDb3VudCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmNoZWNrTmF2aWdhYmxlKCBfLmN1cnJlbnRTbGlkZSAtIF8uZ2V0U2xpZGVDb3VudCgpICkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlIC0gXy5nZXRTbGlkZUNvdW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50RGlyZWN0aW9uID0gMTtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG5cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiggZGlyZWN0aW9uICE9ICd2ZXJ0aWNhbCcgKSB7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlciggc2xpZGVDb3VudCApO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignc3dpcGUnLCBbXywgZGlyZWN0aW9uIF0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LnN0YXJ0WCAhPT0gXy50b3VjaE9iamVjdC5jdXJYICkge1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIF8uY3VycmVudFNsaWRlICk7XG4gICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZUhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoKF8ub3B0aW9ucy5zd2lwZSA9PT0gZmFsc2UpIHx8ICgnb250b3VjaGVuZCcgaW4gZG9jdW1lbnQgJiYgXy5vcHRpb25zLnN3aXBlID09PSBmYWxzZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuZHJhZ2dhYmxlID09PSBmYWxzZSAmJiBldmVudC50eXBlLmluZGV4T2YoJ21vdXNlJykgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBfLnRvdWNoT2JqZWN0LmZpbmdlckNvdW50ID0gZXZlbnQub3JpZ2luYWxFdmVudCAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgIT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgICBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoIDogMTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlID0gXy5saXN0V2lkdGggLyBfLm9wdGlvbnNcbiAgICAgICAgICAgIC50b3VjaFRocmVzaG9sZDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy50b3VjaE9iamVjdC5taW5Td2lwZSA9IF8ubGlzdEhlaWdodCAvIF8ub3B0aW9uc1xuICAgICAgICAgICAgICAgIC50b3VjaFRocmVzaG9sZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5hY3Rpb24pIHtcblxuICAgICAgICAgICAgY2FzZSAnc3RhcnQnOlxuICAgICAgICAgICAgICAgIF8uc3dpcGVTdGFydChldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ21vdmUnOlxuICAgICAgICAgICAgICAgIF8uc3dpcGVNb3ZlKGV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlRW5kKGV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlTW92ZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgZWRnZVdhc0hpdCA9IGZhbHNlLFxuICAgICAgICAgICAgY3VyTGVmdCwgc3dpcGVEaXJlY3Rpb24sIHN3aXBlTGVuZ3RoLCBwb3NpdGlvbk9mZnNldCwgdG91Y2hlcywgdmVydGljYWxTd2lwZUxlbmd0aDtcblxuICAgICAgICB0b3VjaGVzID0gZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkID8gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzIDogbnVsbDtcblxuICAgICAgICBpZiAoIV8uZHJhZ2dpbmcgfHwgXy5zY3JvbGxpbmcgfHwgdG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VyTGVmdCA9IF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5jdXJYID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlc1swXS5wYWdlWCA6IGV2ZW50LmNsaWVudFg7XG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWSA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVkgOiBldmVudC5jbGllbnRZO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSBNYXRoLnJvdW5kKE1hdGguc3FydChcbiAgICAgICAgICAgIE1hdGgucG93KF8udG91Y2hPYmplY3QuY3VyWCAtIF8udG91Y2hPYmplY3Quc3RhcnRYLCAyKSkpO1xuXG4gICAgICAgIHZlcnRpY2FsU3dpcGVMZW5ndGggPSBNYXRoLnJvdW5kKE1hdGguc3FydChcbiAgICAgICAgICAgIE1hdGgucG93KF8udG91Y2hPYmplY3QuY3VyWSAtIF8udG91Y2hPYmplY3Quc3RhcnRZLCAyKSkpO1xuXG4gICAgICAgIGlmICghXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyAmJiAhXy5zd2lwaW5nICYmIHZlcnRpY2FsU3dpcGVMZW5ndGggPiA0KSB7XG4gICAgICAgICAgICBfLnNjcm9sbGluZyA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA9IHZlcnRpY2FsU3dpcGVMZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZURpcmVjdGlvbiA9IF8uc3dpcGVEaXJlY3Rpb24oKTtcblxuICAgICAgICBpZiAoZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkICYmIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPiA0KSB7XG4gICAgICAgICAgICBfLnN3aXBpbmcgPSB0cnVlO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvc2l0aW9uT2Zmc2V0ID0gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gMSA6IC0xKSAqIChfLnRvdWNoT2JqZWN0LmN1clggPiBfLnRvdWNoT2JqZWN0LnN0YXJ0WCA/IDEgOiAtMSk7XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbk9mZnNldCA9IF8udG91Y2hPYmplY3QuY3VyWSA+IF8udG91Y2hPYmplY3Quc3RhcnRZID8gMSA6IC0xO1xuICAgICAgICB9XG5cblxuICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGg7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5lZGdlSGl0ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmICgoXy5jdXJyZW50U2xpZGUgPT09IDAgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdyaWdodCcpIHx8IChfLmN1cnJlbnRTbGlkZSA+PSBfLmdldERvdENvdW50KCkgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdsZWZ0JykpIHtcbiAgICAgICAgICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggKiBfLm9wdGlvbnMuZWRnZUZyaWN0aW9uO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgc3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIChzd2lwZUxlbmd0aCAqIChfLiRsaXN0LmhlaWdodCgpIC8gXy5saXN0V2lkdGgpKSAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyBzd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlIHx8IF8ub3B0aW9ucy50b3VjaE1vdmUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5hbmltYXRpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2V0Q1NTKF8uc3dpcGVMZWZ0KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVTdGFydCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdG91Y2hlcztcblxuICAgICAgICBfLmludGVycnVwdGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoXy50b3VjaE9iamVjdC5maW5nZXJDb3VudCAhPT0gMSB8fCBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdG91Y2hlcyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udG91Y2hPYmplY3Quc3RhcnRYID0gXy50b3VjaE9iamVjdC5jdXJYID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlcy5wYWdlWCA6IGV2ZW50LmNsaWVudFg7XG4gICAgICAgIF8udG91Y2hPYmplY3Quc3RhcnRZID0gXy50b3VjaE9iamVjdC5jdXJZID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlcy5wYWdlWSA6IGV2ZW50LmNsaWVudFk7XG5cbiAgICAgICAgXy5kcmFnZ2luZyA9IHRydWU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVuZmlsdGVyU2xpZGVzID0gU2xpY2sucHJvdG90eXBlLnNsaWNrVW5maWx0ZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uJHNsaWRlc0NhY2hlICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG5cbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgJCgnLnNsaWNrLWNsb25lZCcsIF8uJHNsaWRlcikucmVtb3ZlKCk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMpIHtcbiAgICAgICAgICAgIF8uJGRvdHMucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy4kcHJldkFycm93ICYmIF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMucHJldkFycm93KSkge1xuICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uJG5leHRBcnJvdyAmJiBfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLm5leHRBcnJvdykpIHtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICAgICAgICAgIC5jc3MoJ3dpZHRoJywgJycpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bnNsaWNrID0gZnVuY3Rpb24oZnJvbUJyZWFrcG9pbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCd1bnNsaWNrJywgW18sIGZyb21CcmVha3BvaW50XSk7XG4gICAgICAgIF8uZGVzdHJveSgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51cGRhdGVBcnJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBjZW50ZXJPZmZzZXQ7XG5cbiAgICAgICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmXG4gICAgICAgICAgICBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICYmXG4gICAgICAgICAgICAhXy5vcHRpb25zLmluZmluaXRlICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID09PSAwKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gMSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVwZGF0ZURvdHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy4kZG90c1xuICAgICAgICAgICAgICAgIC5maW5kKCdsaScpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLmVuZCgpO1xuXG4gICAgICAgICAgICBfLiRkb3RzXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2xpJylcbiAgICAgICAgICAgICAgICAuZXEoTWF0aC5mbG9vcihfLmN1cnJlbnRTbGlkZSAvIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnZpc2liaWxpdHkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG5cbiAgICAgICAgICAgIGlmICggZG9jdW1lbnRbXy5oaWRkZW5dICkge1xuXG4gICAgICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgJC5mbi5zbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBvcHQgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgIGwgPSBfLmxlbmd0aCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICByZXQ7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0ID09ICdvYmplY3QnIHx8IHR5cGVvZiBvcHQgPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgX1tpXS5zbGljayA9IG5ldyBTbGljayhfW2ldLCBvcHQpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldCA9IF9baV0uc2xpY2tbb3B0XS5hcHBseShfW2ldLnNsaWNrLCBhcmdzKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmV0ICE9ICd1bmRlZmluZWQnKSByZXR1cm4gcmV0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfO1xuICAgIH07XG5cbn0pKTtcbiIsIi8qKlxuICogQGxpbmsgaHR0cHM6Ly9jb250YWN0Zm9ybTcuY29tL2RvbS1ldmVudHMvXG4gKiBMaXN0IG9mIENvbnRhY3QgRm9ybSA3IEN1c3RvbSBET00gRXZlbnRzXG4gd3BjZjdpbnZhbGlkIOKAlCBGaXJlcyB3aGVuIGFuIEFqYXggZm9ybSBzdWJtaXNzaW9uIGhhcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LCBidXQgbWFpbCBoYXNu4oCZdCBiZWVuIHNlbnQgYmVjYXVzZSB0aGVyZSBhcmUgZmllbGRzIHdpdGggaW52YWxpZCBpbnB1dC5cbiB3cGNmN3NwYW0g4oCUIEZpcmVzIHdoZW4gYW4gQWpheCBmb3JtIHN1Ym1pc3Npb24gaGFzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHksIGJ1dCBtYWlsIGhhc27igJl0IGJlZW4gc2VudCBiZWNhdXNlIGEgcG9zc2libGUgc3BhbSBhY3Rpdml0eSBoYXMgYmVlbiBkZXRlY3RlZC5cbiB3cGNmN21haWxzZW50IOKAlCBGaXJlcyB3aGVuIGFuIEFqYXggZm9ybSBzdWJtaXNzaW9uIGhhcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LCBhbmQgbWFpbCBoYXMgYmVlbiBzZW50LlxuIHdwY2Y3bWFpbGZhaWxlZCDigJQgRmlyZXMgd2hlbiBhbiBBamF4IGZvcm0gc3VibWlzc2lvbiBoYXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSwgYnV0IGl0IGhhcyBmYWlsZWQgaW4gc2VuZGluZyBtYWlsLlxuIHdwY2Y3c3VibWl0IOKAlCBGaXJlcyB3aGVuIGFuIEFqYXggZm9ybSBzdWJtaXNzaW9uIGhhcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LCByZWdhcmRsZXNzIG9mIG90aGVyIGluY2lkZW50cy5cblxuICogUFJPUEVSVFlcdERFU0NSSVBUSU9OXG4gZGV0YWlsLmNvbnRhY3RGb3JtSWRcdFRoZSBJRCBvZiB0aGUgY29udGFjdCBmb3JtLlxuIGRldGFpbC5wbHVnaW5WZXJzaW9uXHRUaGUgdmVyc2lvbiBvZiBDb250YWN0IEZvcm0gNyBwbHVnaW4uXG4gZGV0YWlsLmNvbnRhY3RGb3JtTG9jYWxlXHRUaGUgbG9jYWxlIGNvZGUgb2YgdGhlIGNvbnRhY3QgZm9ybS5cbiBkZXRhaWwudW5pdFRhZ1x0VGhlIHVuaXQtdGFnIG9mIHRoZSBjb250YWN0IGZvcm0uXG4gZGV0YWlsLmNvbnRhaW5lclBvc3RJZFx0VGhlIElEIG9mIHRoZSBwb3N0IHRoYXQgdGhlIGNvbnRhY3QgZm9ybSBpcyBwbGFjZWQgaW4uXG4gKi9cblxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAnd3BjZjdzdWJtaXQnLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXHRpZiAoICcxMjMnID09PSBldmVudC5kZXRhaWwuY29udGFjdEZvcm1JZCApIHtcblx0XHRhbGVydCggXCJUaGUgY29udGFjdCBmb3JtIElEIGlzIDEyMy5cIiApO1xuXHRcdC8vIGRvIHNvbWV0aGluZyBwcm9kdWN0aXZlXG5cdH1cbn0sIGZhbHNlICk7XG4iLCIkID0galF1ZXJ5O1xuXG4kKCBkb2N1bWVudCApLnJlYWR5KCBmdW5jdGlvbiggJCApIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdCQoICcuaGFtYnVyZ2VyJyApLmNsaWNrKCBmdW5jdGlvbigpIHtcblx0XHRsZXQgJHRoaXMgPSAkKHRoaXMpO1xuXHRcdCQoIHRoaXMgKS50b2dnbGVDbGFzcyggJ2lzLWFjdGl2ZScgKTtcblx0fSApO1xufSApO1xuXG4iXX0=
